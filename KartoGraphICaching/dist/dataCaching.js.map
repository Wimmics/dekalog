{"mappings":";;;;;;;;;;;AAAA;;;;;;ACAA;;;;ACAA;;;AAIA,IAAI,oCAAc;AAEX,SAAS,0CAAe,QAAgB,EAAE;IAC7C,IAAG,YAAY,IAAI,IAAI,YAAY,aAAa,YAAY,IACxD,oCAAc;SAEd,oCAAc;AAEtB;AAEO,SAAS,0CAAI,SAAc,EAAE,GAAG,CAAQ,EAAS;IACpD,8BAAQ,OAAO,cAAc;AACjC;AAEO,SAAS,uCAAM,SAAc,EAAE,GAAG,CAAQ,EAAS;IACtD,8BAAQ,SAAS,cAAc;AACnC;AAEO,SAAS,0CAAK,SAAc,EAAE,GAAG,CAAQ,EAAS;IACrD,8BAAQ,QAAQ,cAAc;AAClC;AAEA,SAAS,8BAAQ,KAAK,EAAE,SAAc,EAAE,GAAG,CAAQ,EAAQ;IACvD,MAAM,MAAM,CAAA,GAAA,YAAK,AAAD;IAChB,MAAM,UAAU,cAAY,gBAAgB,OAAO,IAAI,WAAW,IAAI,cAAc;IACpF,QAAQ,KAAK,CAAC;IACd,CAAA,GAAA,yCAAW,EAAE,mCAAa,UAAU;AACxC;;;ADzBO,IAAI,4CAAiB;AACrB,IAAI,4CAA6B;AACxC,IAAI,+CAAyB;AACtB,IAAI,4CAAuB;AAC3B,IAAI,4CAA0C;AAG9C,SAAS,yCAAU,KAAa,EAAE,SAAiB,4BAA4B,EAAE;IACpF,OAAO,CAAA,GAAA,YAAK,AAAD,EAAE,OAAO;AACxB;AAEO,SAAS,4CAA4B;IACxC,OAAO;AACX;AAEO,SAAS,0CAAkB,EAAU,EAAE;IAC1C,IAAI,OAAO,aAAa,OAAO,IAAI,IAAI,MAAM,GACzC,4CAAiB;SAEjB,MAAM,IAAI,MAAM,oDAAoD;AAE5E;AAEO,SAAS,0CAA8B,YAAoB,EAAE;IAChE,IAAI,iBAAiB,aAAa,iBAAiB,IAAI,IAAI,gBAAgB,GACvE,4CAA6B;SAE7B,MAAM,IAAI,MAAM,yEAAyE;AAEjG;AAEO,SAAS,0CAAwB,GAAW,EAAE;IACjD,IAAI,QAAQ,aAAa,QAAQ,IAAI,IAAI,OAAO,GAC5C,4CAAuB;SAEvB,MAAM,IAAI,MAAM,uEAAuE;AAE/F;AAEO,SAAS,0CAA2C,YAAoB,EAAE;IAC7E,IAAI,iBAAiB,aAAa,iBAAiB,IAAI,IAAI,gBAAgB,GACvE,4CAA0C;SAE1C,MAAM,IAAI,MAAM,yEAAyE;AAEjG;AAEO,SAAS,0CAAa,QAAQ,EAAE,OAAO,EAAE;IAC5C,iBAAa,UAAU,SAAS;QAAE,MAAM;IAAK,GAAG,KAAK,CAAC,CAAA,QAAS;QAC3D,uCAAa,2BAA2B;IAC5C;AACJ;AAEO,SAAS,0CAAU,QAAQ,EAAE,OAAO,EAAE;IACzC,iBAAa,UAAU,SAAS,KAAK,CAAC,CAAA,QAAS;QAC3C,uCAAa,yBAAyB,UAAU;IACpD;AACJ;AAEO,SAAS,0CAAS,QAAgB,EAAmB;IACxD,IAAI;IACJ,IAAI,SAAS,UAAU,CAAC,cAAc,SAAS,UAAU,CAAC,aACtD,kBAAkB,0CAAgB;SAC/B,IAAI,SAAS,UAAU,CAAC,YAC3B,kBAAkB,gBAAY,SAAS,OAAO,CAAC,WAAW,KAAK,IAAI,CAAC,CAAA,SAAU,OAAO,QAAQ;SAE7F,kBAAkB,gBAAY,UAAU,IAAI,CAAC,CAAA,SAAU,OAAO,QAAQ;IAE1E,OAAO;AACX;AAYO,SAAS,0CAAkB,IAAuB,EAAE,uBAAgD,EAAgB;IACvH,IAAI,WAAW,KAAK,GAAG,CAAC,CAAA,MAAO;IAC/B,IAAI,SAAS,MAAM,GAAG,GAClB,OAAO,wBAAwB,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,IAAM;QAC/D,SAAS,KAAK;QACd,OAAO,0CAAkB,UAAU;IACvC;IAEJ,OAAO,IAAI,QAAc,CAAC,SAAS,SAAW;AAClD;AAEO,SAAS,0CAAa,GAAG,EAAE,SAAS,IAAI,KAAK,EAAE,SAAS,KAAK,EAAE,QAAQ,EAAE,EAAE,SAAS,CAAC,EAAE;IAC1F,IAAI,YAAY,IAAI,CAAA,GAAA,cAAO,AAAD;IAC1B,UAAU,GAAG,CAAC,UAAU;IACxB,UAAU,GAAG,CAAC,iBAAiB;IAC/B,OAAO,OAAO,CAAC,CAAC,OAAO,MAAQ;QAC3B,UAAU,GAAG,CAAC,KAAK;IACvB;IACA,IAAI,SAAsB;QACtB,QAAQ;QACR,SAAS;QACT,UAAU;IACd;IACA,IAAI,OAAO,aAAa,CAAC,WAAW,GAChC,OAAO,IAAI,GAAG;IAElB,IAAI,gDAA0B,2CAC1B,OAAO,CAAA,GAAA,iBAAU,AAAD,EAAE,2CAAyC,IAAI,CAAC,IAAM,0CAAa,KAAK,QAAQ,QAAQ,OAAO;SAC5G;QACH;QACA,OAAO,CAAA,GAAA,gBAAI,EAAE,KAAK,QACb,IAAI,CAAC,CAAA,WAAY;YACd,IAAI,SAAS,EAAE,EACX,OAAO,SAAS,IAAI,GAAG,IAAI,CAAC,CAAA,OAAQ,KAAK,IAAI;iBAE7C,MAAM,SAAS;QAEvB,GAAG,KAAK,CAAC,CAAA,QAAS;YACd,IAAI,iBAAiB,CAAA,GAAA,iBAAS,GAAG;gBAC7B,uCAAa,MAAM,IAAI,EAAE,MAAM,OAAO;gBACtC,0CAAY,QAAQ,QAAQ,UAAU,QAAQ,KAAK;gBACnD,IAAI,SAAS,2CACT,OAAO,CAAA,GAAA,iBAAU,AAAD,EAAE,2CAA4B,IAAI,CAAC,0CAAa,KAAK,QAAQ,QAAQ,OAAO,SAAS;qBAErG,uCAAa,oBAAoB;YAEzC,OACI,uCAAa,oBAAoB;QAEzC,GAAG,OAAO,CAAC,IAAM;YACb;YACA;QACJ;IAER,CAAC;AACL;AAEO,SAAS,0CAAgB,GAAG,EAAE,SAAS,IAAI,KAAK,EAAE;IACrD,OAAO,0CAAa,KAAK;AAC7B;AAEO,SAAS,0CAAiB,GAAG,EAAE,QAAQ,EAAE,EAAE,SAAS,IAAI,KAAK,EAAE;IAClE,OAAO,0CAAa,KAAK,QAAQ,QAAQ;AAC7C;AAEO,SAAS,0CAAiB,GAAG,EAAE,eAAe,IAAI,KAAK,EAAE;IAC5D,IAAI,SAAS,IAAI;IACjB,OAAO,GAAG,CAAC,gBAAgB;IAC3B,aAAa,OAAO,CAAC,CAAC,OAAO,MAAQ;QACjC,OAAO,GAAG,CAAC,KAAK;IACpB;IACA,OAAO,0CAAa,KAAK,QAAQ,IAAI,CAAC,CAAA,WAAY;QAC9C,IAAG,YAAY,IAAI,IAAI,YAAY,aAAa,YAAY,IACxD,OAAO,CAAC;aAER,IAAI;YACA,OAAO,KAAK,KAAK,CAAC;QACtB,EAAE,OAAO,OAAO;YACZ,uCAAa,KAAK,OAAO;YACzB,MAAM,MAAK;QACf;IAER;AACJ;AAOO,SAAS,yCAAoB,IAAI,EAAE;IACtC,OAAO,KAAK,OAAO,CAAC,mBAChB,SAAU,KAAK,EAAE;QACb,IAAI,eAAe,OAAO,YAAY,CAAC,SAAS,MAAM,OAAO,CAAC,QAAQ,KAAK;QAC3E,IAAI,kBAAkB,mBAAmB;QACzC,OAAO;IACX;AACR;;;ADnLA,CAAA,GAAA,YAAK,AAAD,EAAE,MAAM,CAAC,CAAA,GAAA,4BAAO;AACpB,CAAA,GAAA,YAAK,AAAD,EAAE,MAAM,CAAC,CAAA,GAAA,gCAAW;AACxB,CAAA,GAAA,YAAK,AAAD,EAAE,MAAM,CAAC,CAAA,GAAA,qCAAgB;AAC7B,CAAA,GAAA,YAAK,AAAD,EAAE,MAAM,CAAC,CAAA,GAAA,4BAAO;AAIpB,MAAM,4CAAsB;AAE5B,MAAM,uCAAiB;AACvB,MAAM,mCAAa,2DAAgB,uCAAiB;AACpD,MAAM,oCAAc,2DAAgB,uCAAiB;AACrD,MAAM,sCAAgB,2DAAgB,uCAAiB;AAEvD,MAAM,0CAAoB,uCAAiB;AAC3C,MAAM,uCAAiB,uCAAiB;AACxC,MAAM,+CAAyB,uCAAiB;AAChD,MAAM,+CAAyB,uCAAiB;AAChD,MAAM,8CAAwB,uCAAiB;AAC/C,MAAM,4CAAsB,uCAAiB;AAC7C,MAAM,8CAAwB,uCAAiB;AAC/C,MAAM,4CAAsB,uCAAiB;AAC7C,MAAM,2CAAqB,uCAAiB;AAC5C,MAAM,8CAAwB,uCAAiB;AAC/C,MAAM,kDAA4B,uCAAiB;AACnD,MAAM,uDAAiC,uCAAiB;AACxD,MAAM,kDAA4B,uCAAiB;AACnD,MAAM,iDAA2B,uCAAiB;AAClD,MAAM,mDAA6B,uCAAiB;AACpD,MAAM,kDAA4B,uCAAiB;AACnD,MAAM,uDAAiC,uCAAiB;AACxD,MAAM,6CAAuB,uCAAiB;AAC9C,MAAM,qDAA+B,uCAAiB;AACtD,MAAM,kDAA4B,uCAAiB;AACnD,MAAM,+CAAyB,uCAAiB;AAEhD,MAAM,oCAAc,uCAAiB;AAErC,SAAS,qDAA+B,SAAS,EAAE;IAC/C,IAAI,SAAS;IACb,UAAU,OAAO,CAAC,CAAC,MAAM,IAAM;QAC3B,IAAI,IAAI,GACJ,UAAU,2BAA2B,OAAO;aAE5C,UAAU,uBAAuB,OAAO;IAEhD;IACA,UAAU;IACV,OAAO;AACX;AAEA,SAAS,yCAAmB,KAAK,EAAE;IAC/B,IAAI,MAAM,QAAQ,CAAC,aAAa,MAAM,QAAQ,CAAC,QAC3C,OAAO,0CAAwB,+CAA+C,mBAAmB,SAAS;SAG1G,MAAM,WAAW,MAAM;AAE/B;AAEA,SAAS,kDAA4B,KAAK,EAAE,QAAQ,yCAAmB,EAAE,SAAS,CAAC,EAAE,cAAc,EAAE,EAAE;IACnG,IAAI,iBAAiB,QAAQ,YAAY,QAAQ,aAAa;IAC9D,OAAO,yCAAmB,gBACrB,IAAI,CAAC,CAAA,cAAe;QACjB,YAAY,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA,aAAc;YAC/C,IAAI,iBAAiB,CAAC;YACtB,YAAY,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA,WAAY;gBACtC,cAAc,CAAC,SAAS,GAAG,UAAU,CAAC,SAAS;YACnD;YACA,YAAY,IAAI,CAAC;QACrB;QACA,IAAI,YAAY,OAAO,CAAC,QAAQ,CAAC,MAAM,GAAG,GACtC,OAAO,kDAA4B,OAAO,QAAQ,2CAAqB,SAAS,2CAAqB;IAE7G,GACC,IAAI,CAAC,IAAM;QACR,OAAO;IACX,GACC,KAAK,CAAC,CAAA,QAAS;QACZ,QAAQ,GAAG,CAAC;QACZ,OAAO;IACX,GACC,OAAO,CAAC,IAAM;QACX,OAAO;IACX;AACR;AAEA,SAAS,sCAAgB;IACrB,QAAQ,GAAG,CAAC;IACZ,OAAO,QAAQ,GAAG,CACd,iCAAW,GAAG,CAAC,CAAA,gBAAiB;QAC5B,IAAI,YAAY,cAAc,MAAM;QACpC,IAAI,oBAAoB,4VAOpB,qDAA+B,aAC/B,OACA;QACJ,IAAI,eAAe,CAAA,GAAA,UAAG,AAAD,EAAE,GAAG,MAAM,CAAC;QACjC,OAAO,kDAA4B,mBAC9B,IAAI,CAAC,CAAA,OAAQ;YACV,IAAI,eAAe,EAAE;YACrB,KAAK,OAAO,CAAC,CAAC,OAAS;gBACnB,aAAa,IAAI,CAAC,KAAK,WAAW,CAAC,KAAK;YAC5C;YACA,OAAO;gBAAE,UAAU;gBAAc,WAAW;YAAa;QAC7D;IACR,IACC,IAAI,CAAC,CAAA,qBAAsB;QACxB,IAAI,kBAAkB,CAAC;QACvB,mBAAmB,OAAO,CAAC,CAAA,gBAAiB;YACxC,eAAe,CAAC,cAAc,QAAQ,CAAC,GAAG,cAAc,SAAS;QACrE;QACA,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC;YAC7B,qBAAiB,yCAAmB;YACpC,QAAQ,GAAG,CAAC;QAChB,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;IACJ,GAAG,KAAK,CAAC,CAAA,QAAS;QACd,QAAQ,GAAG,CAAC;QACZ,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC,EAAE;YAC/B,qBAAiB,yCAAmB;YACpC,QAAQ,GAAG,CAAC;QAChB,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;IACJ;AACR;AAeA,SAAS,wCAAkB;IACvB,QAAQ,GAAG,CAAC;IACZ,IAAI,qBAAqB,EAAE;IAE3B,8CAA8C;IAC9C,OAAO,QAAQ,GAAG,CAAC,oCAAc,GAAG,CAAC,CAAC,OAAS;QAC3C,sCAAsC;QACtC,IAAI,WAAW,KAAK,GAAG;QACvB,IAAI;QAEJ,IAAI,sBAAsB,8GAA8G,WAAW;QACnJ,OAAO,kDAA4B,qBAC9B,IAAI,CAAC,CAAA,eAAgB;YAClB,IAAI,yBAAyB,IAAI;YACjC,aAAa,OAAO,CAAC,CAAC,cAAc,IAAM;gBACtC,uBAAuB,GAAG,CAAC,UAAU,aAAa,QAAQ,CAAC,KAAK;YACpE;YAEA,IAAI,0BAA0B,kCAAY,MAAM,CAAC,CAAA,UAAW,QAAQ,GAAG,IAAI,KAAK,KAAK,CAAC,MAAM,CAAC,QAAQ;YACrG,IAAI;YACJ,IAAI,wBAAwB,MAAM,GAAG,GACjC,aAAa,uBAAuB,CAAC,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,KAAK,QAAQ,CAAC,GAAG;YAE1F,IAAI;YACJ,IAAI,uBAAuB,GAAG,CAAC,aAAa,WACxC,iBAAiB,uBAAuB,GAAG,CAAC,UAAU,QAAQ,CAAC,GAAG,KAAK,QAAQ,CAAC,GAAG;YAGvF,eAAe;gBAAE,UAAU;gBAAU,KAAK,KAAK,KAAK,CAAC,MAAM,CAAC,GAAG;gBAAE,KAAK,KAAK,KAAK,CAAC,MAAM,CAAC,GAAG;gBAAE,SAAS;gBAAI,QAAQ;gBAAI,MAAM;gBAAI,KAAK;gBAAI,UAAU;gBAAY,gBAAgB;gBAAgB,WAAW;YAAG;YAC7M,IAAI,KAAK,KAAK,CAAC,MAAM,CAAC,OAAO,IAAI,WAC7B,aAAa,OAAO,GAAG,KAAK,KAAK,CAAC,MAAM,CAAC,OAAO;YAEpD,IAAI,KAAK,KAAK,CAAC,MAAM,CAAC,UAAU,IAAI,WAChC,aAAa,MAAM,GAAG,KAAK,KAAK,CAAC,MAAM,CAAC,UAAU;YAEtD,IAAI,KAAK,KAAK,CAAC,MAAM,CAAC,IAAI,IAAI,WAC1B,aAAa,IAAI,GAAG,KAAK,KAAK,CAAC,MAAM,CAAC,IAAI;YAE9C,IAAI,KAAK,KAAK,CAAC,MAAM,CAAC,GAAG,IAAI,WACzB,aAAa,GAAG,GAAG,KAAK,KAAK,CAAC,MAAM,CAAC,GAAG;YAE5C,IAAI,aAAa,6FAA6F,WAAW;YACzH,OAAO;QACX,GACC,IAAI,CAAC,CAAA,aAAc,yCAAmB,YAClC,IAAI,CAAC,CAAA,iBAAkB;gBACpB,IAAI,cAAc,oDAAoD,aAAa,QAAQ,GAAG,QAAQ,aAAa,QAAQ,GAAG;gBAC9H,eAAe;gBACf,IAAI,aAAa,OAAO,IAAI,WACxB,eAAe,+BAA+B,aAAa,OAAO,GAAG;gBAEzE,IAAI,aAAa,MAAM,IAAI,WACvB,eAAe,8BAA8B,aAAa,MAAM,GAAG;gBAEvE,IAAI,aAAa,IAAI,IAAI,WACrB,eAAe,4BAA4B,aAAa,IAAI,GAAG;gBAEnE,IAAI,aAAa,GAAG,IAAI,WACpB,eAAe,oCAAoC,aAAa,GAAG,GAAG;gBAE1E,IAAI,aAAa,QAAQ,IAAI,WAAW;oBACpC,eAAe,gDAAgD,aAAa,QAAQ,GAAG;oBACvF,IAAI,aAAa,cAAc,IAAI,WAAW;wBAC1C,IAAI,cAAc,aAAa,QAAQ,CAAC,aAAa,CAAC,aAAa,cAAc,KAAK;wBACtF,IAAI,aACA,eAAe,qDAAqD,aAAa,cAAc,GAAG;oBAE1G,CAAC;gBACL,CAAC;gBACD,IAAI,eAAe,OAAO,CAAC,QAAQ,CAAC,IAAI,GAAG,GACvC,eAAe,yBAAyB,iBAAiB;gBAE7D,eAAe;gBACf,eAAe;gBACf,aAAa,SAAS,GAAG;YAC7B,GACC,KAAK,CAAC,CAAA,QAAS;gBACZ,QAAQ,GAAG,CAAC;YAChB,IACF,IAAI,CAAC,IAAM;YACT,mBAAmB,IAAI,CAAC;QAC5B,GACC,KAAK,CAAC,CAAA,QAAS;YACZ,QAAQ,GAAG,CAAC;QAChB;IACR,IACK,OAAO,CAAC,IAAM;QACX,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC;YAC7B,qBAAiB,sCAAgB;YACjC,QAAQ,GAAG,CAAC;QAChB,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;IACJ,GACC,KAAK,CAAC,CAAA,QAAS;QACZ,QAAQ,GAAG,CAAC;QACZ,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC,EAAE;YAC/B,qBAAiB,sCAAgB;YACjC,QAAQ,GAAG,CAAC;QAChB,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;IACJ;AAER;AAEA,SAAS,2CAAqB;IAC1B,QAAQ,GAAG,CAAC;IACZ,gEAAgE;IAChE,IAAI,uBAAuB;IAY3B,IAAI,0BAA0B,EAAE;IAChC,IAAI,0BAA0B,EAAE;IAChC,OAAO,kDAA4B,sBAC9B,IAAI,CAAC,CAAA,OAAQ;QACV,IAAI,cAAc,IAAI;QACtB,IAAI,cAAc,IAAI;QACtB,IAAI,cAAc,IAAI;QACtB,KAAK,OAAO,CAAC,CAAC,aAAa,IAAM;YAC7B,IAAI,cAAc,YAAY,QAAQ,CAAC,KAAK;YAC5C,YAAY,GAAG,CAAC;YAChB,IAAI,UAAU;YACd,IAAI,YAAY,UAAU,IAAI,WAC1B,UAAU,YAAY,UAAU,CAAC,KAAK;YAE1C,IAAI,QAAQ,YAAY,KAAK,CAAC,KAAK;YACnC,IAAI,WAAW,aAAa,QAAQ,aAAa,CAAC,eAAe,GAC7D,YAAY,GAAG,CAAC,aAAa,OAAO;YAExC,IAAI,WAAW,aAAa,QAAQ,aAAa,CAAC,eAAe,GAC7D,YAAY,GAAG,CAAC,aAAa,OAAO;QAE5C;QAEA,YAAY,OAAO,CAAC,CAAC,OAAS;YAC1B,IAAI,WAAW,YAAY,GAAG,CAAC;YAC/B,IAAI,WAAW,YAAY,GAAG,CAAC;YAC/B,IAAI,YAAY,WACZ,WAAW;YAEf,IAAI,YAAY,WACZ,WAAW;YAEf,IAAI,mBAAmB;gBAAE,YAAY;gBAAM,YAAY;gBAAU,YAAY;gBAAU,eAAgB,WAAW;YAAU;YAC5H,wBAAwB,IAAI,CAAC;QACjC;IAGJ,GACC,IAAI,CAAC,IAAM;QACR,MAAM,qBAAqB;QAY3B,IAAI,qBAAqB,IAAI;QAC7B,IAAI,oBAAoB,IAAI;QAC5B,OAAO,kDAA4B,oBAC9B,IAAI,CAAC,CAAA,OAAQ;YACV,qBAAqB,IAAI;YACzB,IAAI,cAAc,IAAI;YACtB,KAAK,OAAO,CAAC,CAAA,cAAe;gBACxB,MAAM,cAAc,YAAY,QAAQ,CAAC,KAAK;gBAC9C,IAAI,CAAC,mBAAmB,GAAG,CAAC,cACxB,mBAAmB,GAAG,CAAC,aAAa,IAAI;gBAE5C,IAAI,YAAY,QAAQ,IAAI,WAAW;oBACnC,MAAM,WAAW,YAAY,QAAQ,CAAC,KAAK;oBAC3C,IAAI,CAAC,mBAAmB,GAAG,CAAC,cACxB,mBAAmB,GAAG,CAAC,aAAa,IAAI;oBAE5C,YAAY,GAAG,CAAC;oBAChB,IAAI,kBAAkB,GAAG,CAAC,aAAa,WACnC,kBAAkB,GAAG,CAAC,UAAU,SAAS,OAAO,CAAC,8FAA8F,aAAa,OAAO,CAAC,8FAA8F,aAAa,OAAO,CAAC,iBAAiB;oBAE5S,mBAAmB,GAAG,CAAC,aAAa,GAAG,CAAC,kBAAkB,GAAG,CAAC;gBAClE,CAAC;YACL;YACA,mBAAmB,OAAO,CAAC,CAAC,YAAY,aAAa,MAAQ;gBACzD,IAAI,qBAAqB;uBAAI;iBAAW,CAAC,IAAI,CAAC,CAAC,GAAG,IAAM,EAAE,aAAa,CAAC;gBACxE,wBAAwB,IAAI,CAAC;oBAAE,UAAU;oBAAa,UAAU;gBAAmB;YACvF;YAEA,wBAAwB,IAAI,CAAC,CAAC,GAAG,IAAM;gBACnC,OAAO,EAAE,QAAQ,CAAC,aAAa,CAAC,EAAE,QAAQ;YAC9C;QACJ;IACR,GACC,OAAO,CAAC,IAAM;QACX,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC;YAC7B,qBAAiB,8CAAwB;QAC7C,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;QACA,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC;YAC7B,qBAAiB,8CAAwB;QAC7C,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;QACA,QAAQ,GAAG,CAAC;IAChB,GACC,KAAK,CAAC,CAAA,QAAS;QACZ,QAAQ,GAAG,CAAC;QACZ,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC,EAAE;YAC/B,qBAAiB,8CAAwB;QAC7C,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;QACA,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC,EAAE;YAC/B,qBAAiB,8CAAwB;QAC7C,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;IACJ;AACR;AAEA,SAAS,kCAAY;IACjB,QAAQ,GAAG,CAAC;IACZ,8EAA8E;IAC9E,IAAI,4BAA4B;IAShC,IAAI,oBAAoB,IAAI;IAC5B,IAAI,iBAAiB,IAAI;IACzB,IAAI,kBAAkB,EAAE;IACxB,IAAI,cAAc,IAAI;IACtB,IAAI,WAAW,IAAI;IACnB,IAAI,aAAa,IAAI;IACrB,IAAI,mBAAmB,EAAE;IAEzB,OAAO,kDAA4B,2BAC9B,IAAI,CAAC,CAAA,OAAQ;QAEV,IAAI,cAAc,IAAI;QACtB,KAAK,OAAO,CAAC,CAAC,aAAa,IAAM;YAC7B,IAAI,gBAAgB,YAAY,UAAU,CAAC,KAAK;YAChD,IAAI,cAAc,YAAY,WAAW,CAAC,KAAK;YAC/C,YAAY,GAAG,CAAC;YAChB,YAAY,GAAG,CAAC;YAChB,IAAI,CAAC,eAAe,GAAG,CAAC,cACpB,eAAe,GAAG,CAAC,aAAa,IAAI;YAExC,eAAe,GAAG,CAAC,aAAa,GAAG,CAAC;QACxC;IAEA,+EAA+E;IAC/E,mCAAmC;IACnC,wJAAwJ;IACxJ,uEAAuE;IAEvE,sFAAsF;IAC1F,GACC,IAAI,CAAC,0CAAwB,gEACzB,IAAI,CAAC,CAAA,cAAe;QACjB,YAAY,OAAO,CAAC,CAAC,MAAM,IAAM;YAC7B,kBAAkB,GAAG,CAAC,KAAK,GAAG;QAClC;QACA,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC;YAC7B,qBAAiB,mCAAa;QAClC,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;IACJ,IACH,IAAI,CAAC,0CAAwB,4BACzB,IAAI,CAAC,CAAA,mBAAoB;QACtB,KAAK,IAAI,UAAU,OAAO,IAAI,CAAC,gBAAgB,CAAC,WAAW,EACvD,kBAAkB,GAAG,CAAC,gBAAgB,CAAC,WAAW,CAAC,OAAO;IAElE,IACH,IAAI,CAAC,0CAAwB,6DACzB,IAAI,CAAC,CAAA,cAAe;QACjB,YAAY,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,CAAA,eAAgB;YACrD,IAAI,aAAa,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,GAAG;gBACzC,IAAI,WAAW,aAAa,MAAM,CAAC,QAAQ,CAAC,EAAE;gBAC9C,kBAAkB,GAAG,CAAC;YAC1B,CAAC;QACL;IACJ,IACH,IAAI,CAAC,IAAM;QACR,+CAA+C;QAC/C,YAAY,OAAO,CAAC,CAAA,gBAAiB;YACjC,IAAI,kBAAkB,GAAG,CAAC,gBACtB,SAAS,GAAG,CAAC;QAErB;QACA,eAAe,OAAO,CAAC,CAAC,kBAAkB,aAAa,MAAQ;YAC3D,gBAAgB,IAAI,CAAC;gBAAE,UAAU;gBAAa,cAAc;uBAAI;iBAAiB;YAAC;QACtF;QAEA,IAAI,aAAa,EAAE;QACnB,IAAI,aAAa;eAAI;SAAS;QAC9B,IAAK,IAAI,IAAI,IAAI,IAAI,WAAW,MAAM,GAAG,IAAI,KAAK,GAAI;YAClD,IAAI,gBAAgB,WAAW,KAAK,CAAC,IAAI,IAAI,IAAI,6CAA6C;YAC9F,yCAAyC;YACzC,IAAI,wBAAwB;YAC5B,cAAc,OAAO,CAAC,CAAC,MAAM,IAAM;gBAC/B,yBAAyB,MAAM,OAAO;gBACtC,yBAAyB;YAC7B;YAEA,IAAI,kBAAkB,gPAKQ,wBAAwB,QAClD;YACJ,WAAW,IAAI,CAAC,0CAAwB,wDAAwD,mBAAmB,mBAAmB;QAC1I;QAEA,OAAO,QAAQ,GAAG,CAAC,YACd,IAAI,CAAC,CAAA,oBAAqB;YACvB,IAAI,kBAAkB,IAAI;YAC1B,kBAAkB,OAAO,CAAC,CAAA,eAAgB;gBACtC,aAAa,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,aAAa,IAAM;oBACtD,IAAI,UAAU,YAAY,OAAO,CAAC,KAAK;oBACvC,IAAI,QAAQ,YAAY,UAAU,CAAC,KAAK;oBACxC,IAAI,gBAAgB,GAAG,CAAC,UAAU,WAC9B,gBAAgB,GAAG,CAAC,OAAO,EAAE;oBAEjC,gBAAgB,GAAG,CAAC,OAAO,IAAI,CAAC;oBAEhC,WAAW,GAAG,CAAC;gBACnB;YACJ;YACA,gBAAgB,OAAO,CAAC,CAAC,aAAa,QAAU;gBAC5C,iBAAiB,IAAI,CAAC;oBAAE,YAAY;oBAAO,UAAU;gBAAY;YACrE;QACJ;IACR,GACC,OAAO,CAAC,IAAM;QACX,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC;YAC7B,qBAAiB,6CAAuB;QAC5C,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;IACJ,GACC,OAAO,CAAC,IAAM;QACX,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC;mBAAI;aAAkB;YACnD,qBAAiB,2CAAqB;QAC1C,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;IACJ,GACC,OAAO,CAAC,IAAM;QACX,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC;YAC7B,qBAAiB,6CAAuB;QAC5C,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;QACA,QAAQ,GAAG,CAAC;IAChB,GACC,KAAK,CAAC,CAAA,QAAS;QACZ,QAAQ,GAAG,CAAC;QACZ,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC,EAAE;YAC/B,qBAAiB,6CAAuB;QAC5C,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;QACA,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC,EAAE;YAC/B,qBAAiB,2CAAqB;QAC1C,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;QACA,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC,EAAE;YAC/B,qBAAiB,6CAAuB;QAC5C,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;IACJ;AACR;AAEA,SAAS,uCAAiB;IACtB,QAAQ,GAAG,CAAC;IACZ,qDAAqD;IACrD,IAAI,qBAAqB;IAUzB,IAAI,qBAAqB,EAAE;IAC3B,OAAO,kDAA4B,oBAC9B,IAAI,CAAC,CAAA,OAAQ;QACV,KAAK,OAAO,CAAC,CAAC,YAAY,IAAM;YAC5B,IAAI,QAAQ,WAAW,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,8BAA8B;YACrE,IAAI,OAAO,yCAAiB,WAAW,IAAI,CAAC,KAAK,EAAE;YACnD,IAAI,cAAc,WAAW,WAAW,CAAC,KAAK;YAC9C,IAAI,UAAU,OAAO,QAAQ,CAAC,WAAW,CAAC,CAAC,KAAK;YAChD,mBAAmB,IAAI,CAAC;gBAAE,UAAU;gBAAa,OAAO;gBAAO,MAAM;gBAAM,SAAS;YAAQ;QAChG;IACJ,GACC,IAAI,CAAC,IAAM;QACR,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC;YAC7B,qBAAiB,2CAAqB;QAC1C,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;QACA,QAAQ,GAAG,CAAC;IAChB,GACC,KAAK,CAAC,CAAA,QAAS;QACZ,QAAQ,GAAG,CAAC;QACZ,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC,EAAE;YAC/B,qBAAiB,2CAAqB;QAC1C,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;IACJ;AACR;AAEA,SAAS,sCAAgB;IACrB,QAAQ,GAAG,CAAC;IACZ,qDAAqD;IACrD,IAAI,qBAAqB;IAUzB,IAAI,yBAAyB,EAAE;IAC/B,OAAO,kDAA4B,oBAC9B,IAAI,CAAC,CAAA,OAAQ;QACV,KAAK,OAAO,CAAC,CAAC,YAAY,IAAM;YAC5B,IAAI,QAAQ,WAAW,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,8BAA8B;YACrE,IAAI,OAAO,yCAAiB,WAAW,IAAI,CAAC,KAAK,EAAE;YACnD,IAAI,cAAc,WAAW,WAAW,CAAC,KAAK;YAC9C,IAAI,UAAU,OAAO,QAAQ,CAAC,WAAW,CAAC,CAAC,KAAK;YAChD,uBAAuB,IAAI,CAAC;gBAAE,UAAU;gBAAa,OAAO;gBAAO,MAAM;gBAAM,SAAS;YAAQ;QACpG;IAEJ,GACC,IAAI,CAAC,IAAM;QACR,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC;YAC7B,qBAAiB,0CAAoB;QACzC,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;QACA,QAAQ,GAAG,CAAC;IAChB,GACC,KAAK,CAAC,CAAA,QAAS;QACZ,QAAQ,GAAG,CAAC;QACZ,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC,EAAE;YAC/B,qBAAiB,0CAAoB;QACzC,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;IACJ;AACR;AAEA,SAAS,yCAAmB;IACxB,QAAQ,GAAG,CAAC;IACZ,wDAAwD;IACxD,IAAI,wBAAwB;IAU5B,IAAI,4BAA4B,EAAE;IAClC,OAAO,kDAA4B,uBAC9B,IAAI,CAAC,CAAA,OAAQ;QACV,KAAK,OAAO,CAAC,CAAC,YAAY,IAAM;YAC5B,IAAI,QAAQ,WAAW,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,8BAA8B;YACrE,IAAI,cAAc,WAAW,WAAW,CAAC,KAAK;YAC9C,IAAI,aAAa,OAAO,QAAQ,CAAC,WAAW,CAAC,CAAC,KAAK;YACnD,IAAI,OAAO,yCAAiB,WAAW,IAAI,CAAC,KAAK,EAAE;YACnD,0BAA0B,IAAI,CAAC;gBAAE,UAAU;gBAAa,OAAO;gBAAO,MAAM;gBAAM,YAAY;YAAW;QAC7G;IACJ,GACC,IAAI,CAAC,IAAM;QACR,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC;YAC7B,qBAAiB,6CAAuB;QAC5C,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;QACA,QAAQ,GAAG,CAAC;IAChB,GACC,KAAK,CAAC,CAAA,QAAS;QACZ,QAAQ,GAAG,CAAC;QACZ,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC,EAAE;YAC/B,qBAAiB,6CAAuB;QAC5C,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;IACJ;AACR;AAEA,SAAS,8CAAwB;IAC7B,QAAQ,GAAG,CAAC;IACZ,IAAI,mBAAmB,EAAE;IACzB,4CAA4C;IAC5C,IAAI,oBAAoB;IAqBxB,OAAO,kDAA4B,mBAC9B,IAAI,CAAC,CAAA,OAAQ;QACV,KAAK,OAAO,CAAC,CAAC,YAAY,IAAM;YAC5B,IAAI,WAAW,WAAW,QAAQ,CAAC,KAAK;YACxC,IAAI,QAAQ,WAAW,KAAK,CAAC,KAAK;YAClC,IAAI,WAAW,WAAW,WAAW,CAAC,KAAK;YAC3C,IAAI,QAAQ,WAAW,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,8BAA8B;YACrE,IAAI,OAAO,yCAAiB,WAAW,IAAI,CAAC,KAAK,EAAE;YACnD,iBAAiB,IAAI,CAAC;gBAAE,UAAU;gBAAU,OAAO;gBAAO,MAAM;gBAAM,UAAU;gBAAU,OAAO;YAAM;QAC3G;IACJ,GACC,IAAI,CAAC,IAAM;QACR,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC;YAC7B,qBAAiB,iDAA2B;QAChD,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;QACA,QAAQ,GAAG,CAAC;IAChB,GACC,KAAK,CAAC,CAAA,QAAS;QACZ,QAAQ,GAAG,CAAC;QACZ,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC,EAAE;YAC/B,qBAAiB,iDAA2B;QAChD,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;IACJ;AACR;AAEA,SAAS,mDAA6B;IAClC,QAAQ,GAAG,CAAC;IACZ,4CAA4C;IAC5C,IAAI,oBAAoB;IAuBxB,IAAI,wBAAwB,EAAE;IAC9B,OAAO,kDAA4B,mBAAmB,IAAI,CAAC,CAAA,OAAQ;QAC/D,KAAK,OAAO,CAAC,CAAC,YAAY,IAAM;YAC5B,IAAI,WAAW,WAAW,QAAQ,CAAC,KAAK;YACxC,IAAI,QAAQ,WAAW,KAAK,CAAC,KAAK;YAClC,IAAI,WAAW,WAAW,WAAW,CAAC,KAAK;YAC3C,IAAI,QAAQ,WAAW,CAAC,CAAC,KAAK;YAC9B,IAAI,OAAO,yCAAiB,WAAW,IAAI,CAAC,KAAK,EAAE;YAEnD,sBAAsB,IAAI,CAAC;gBAAE,UAAU;gBAAU,UAAU;gBAAU,OAAO;gBAAO,MAAM;gBAAM,OAAO;YAAM;QAChH;IACJ,GACK,IAAI,CAAC,IAAM;QACR,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC;YAC7B,qBAAiB,sDAAgC;QACrD,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;QACA,QAAQ,GAAG,CAAC;IAChB,GACC,KAAK,CAAC,CAAA,QAAS;QACZ,QAAQ,GAAG,CAAC;QACZ,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC,EAAE;YAC/B,qBAAiB,sDAAgC;QACrD,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;IACJ;AACR;AAEA,SAAS,8CAAwB;IAC7B,QAAQ,GAAG,CAAC;IAEZ,IAAI,mBAAmB;IAUvB,IAAI,oBAAoB,EAAE;IAC1B,OAAO,kDAA4B,kBAC9B,IAAI,CAAC,CAAA,OAAQ;QACV,KAAK,OAAO,CAAC,CAAC,MAAM,IAAM;YACtB,IAAI,cAAc,KAAK,WAAW,CAAC,KAAK;YACxC,IAAI,OAAO,KAAK,IAAI,CAAC,KAAK;YAC1B,IAAI,QAAQ,KAAK,CAAC,CAAC,KAAK;YACxB,IAAI,OAAO,yCAAiB,KAAK,IAAI,CAAC,KAAK,EAAE;YAE7C,kBAAkB,IAAI,CAAC;gBAAE,UAAU;gBAAa,UAAU;gBAAM,OAAO;gBAAO,MAAM;YAAK;QAC7F;IACJ,GACC,IAAI,CAAC,IAAM;QACR,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC;YAC7B,qBAAiB,iDAA2B;QAChD,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;QACA,QAAQ,GAAG,CAAC;IAChB,GACC,KAAK,CAAC,CAAA,QAAS;QACZ,QAAQ,GAAG,CAAC;QACZ,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC,EAAE;YAC/B,qBAAiB,iDAA2B;QAChD,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;IACJ;AACR;AAEA,SAAS,6CAAuB;IAC5B,QAAQ,GAAG,CAAC;IACZ,IAAI,kBAAkB;IAYtB,IAAI,mBAAmB,EAAE;IACzB,OAAO,kDAA4B,iBAAiB,IAAI,CAAC,CAAA,eAAgB;QACrE,aAAa,OAAO,CAAC,CAAC,YAAY,IAAM;YACpC,IAAI,QAAQ,WAAW,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,8BAA8B;YACrE,IAAI,OAAO,yCAAiB,WAAW,IAAI,CAAC,KAAK;YACjD,IAAI,QAAQ,yCAAiB,WAAW,KAAK,CAAC,KAAK;YACnD,IAAI,MAAM,yCAAiB,WAAW,GAAG,CAAC,KAAK;YAC/C,IAAI,cAAc,WAAW,WAAW,CAAC,KAAK;YAC9C,IAAI,cAAc,CAAA,GAAA,YAAI,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC;YAC1C,iBAAiB,IAAI,CAAC;gBAAE,OAAO;gBAAO,UAAU;gBAAa,MAAM;gBAAM,OAAO;gBAAO,KAAK;gBAAK,SAAS;YAAY;QAC1H;IACJ,GACK,IAAI,CAAC,IAAM;QACR,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC;YAC7B,qBAAiB,gDAA0B;QAC/C,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;QACA,QAAQ,GAAG,CAAC;IAChB,GACC,KAAK,CAAC,CAAA,QAAS;QACZ,QAAQ,GAAG,CAAC;QACZ,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC,EAAE;YAC/B,qBAAiB,gDAA0B;QAC/C,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;IACJ;AACR;AAEA,SAAS,+CAAyB;IAC9B,QAAQ,GAAG,CAAC;IACZ,IAAI,kBAAkB;IAUtB,IAAI,wBAAwB;IAC5B,IAAI,qBAAqB,EAAE;IAC3B,IAAI,mBAAmB,IAAI;IAC3B,OAAO,QAAQ,GAAG,CAAC;QACf,kDAA4B,iBACvB,IAAI,CAAC,CAAA,eAAgB;YAClB,aAAa,OAAO,CAAC,CAAC,YAAY,IAAM;gBACpC,IAAI,QAAQ,WAAW,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,8BAA8B;gBACrE,IAAI,OAAO,yCAAiB,WAAW,IAAI,CAAC,KAAK,EAAE;gBACnD,IAAI,QAAQ,yCAAiB,WAAW,KAAK,CAAC,KAAK,EAAE;gBACrD,IAAI,MAAM,yCAAiB,WAAW,GAAG,CAAC,KAAK,EAAE;gBACjD,IAAI,UAAU,CAAA,GAAA,YAAI,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC;gBAEtC,IAAI,iBAAiB,GAAG,CAAC,UAAU,WAC/B,iBAAiB,GAAG,CAAC,OAAO,CAAC;gBAEjC,iBAAiB,GAAG,CAAC,OAAO,KAAK,GAAG;gBACpC,iBAAiB,GAAG,CAAC,OAAO,GAAG,GAAG;gBAClC,iBAAiB,GAAG,CAAC,OAAO,OAAO,GAAG;gBACtC,iBAAiB,GAAG,CAAC,OAAO,KAAK,GAAG;gBACpC,iBAAiB,GAAG,CAAC,OAAO,IAAI,GAAG;YACvC;QACJ;QACJ,kDAA4B,uBACvB,IAAI,CAAC,CAAA,uBAAwB;YAC1B,qBAAqB,OAAO,CAAC,CAAC,oBAAoB,IAAM;gBACpD,IAAI,QAAQ,mBAAmB,CAAC,CAAC,KAAK;gBACtC,QAAQ,MAAM,OAAO,CAAC,8BAA8B;gBACpD,IAAI,QAAQ,mBAAmB,KAAK,CAAC,KAAK;gBAC1C,IAAI,iBAAiB,GAAG,CAAC,UAAU,WAC/B,iBAAiB,GAAG,CAAC,OAAO,CAAC;gBAEjC,iBAAiB,GAAG,CAAC,OAAO,KAAK,GAAG;gBACpC,mBAAmB,IAAI,CAAC,iBAAiB,GAAG,CAAC;YACjD;QACJ;KACP,EACI,IAAI,CAAC,IAAM;QACR,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC;YAC7B,qBAAiB,kDAA4B;QACjD,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;QACA,QAAQ,GAAG,CAAC;IAChB,GACC,KAAK,CAAC,CAAA,QAAS;QACZ,QAAQ,GAAG,CAAC;QACZ,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC,EAAE;YAC/B,qBAAiB,kDAA4B;QACjD,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;IACJ;AACR;AAGA,SAAS,mDAA6B;IAClC,QAAQ,GAAG,CAAC;IACZ,IAAI,sBAAsB;IA0B1B,IAAI,WAAW,IAAI;IACnB,IAAI,0BAA0B,IAAI;IAClC,IAAI,kCAAkC,IAAI;IAC1C,IAAI,mBAAmB,EAAE;IACzB,OAAO,kDAA4B,qBAC9B,IAAI,CAAC,CAAA,OAAQ;QACV,KAAK,OAAO,CAAC,CAAC,MAAM,IAAM;YACtB,IAAI,IAAI,KAAK,CAAC,CAAC,KAAK;YACpB,SAAS,GAAG,CAAC;YACb,IAAI,cAAc,KAAK,WAAW,CAAC,KAAK;YACxC,IAAI,wBAAwB,GAAG,CAAC,MAAM,WAClC,wBAAwB,GAAG,CAAC,GAAG;gBAAE,OAAO;YAAE;YAE9C,IAAI,KAAK,EAAE,IAAI,WAAW;gBACtB,IAAI,KAAK,OAAO,QAAQ,CAAC,KAAK,EAAE,CAAC,KAAK;gBACtC,IAAI,mBAAmB,wBAAwB,GAAG,CAAC;gBACnD,IAAI,wBAAwB,GAAG,CAAC,GAAG,OAAO,IAAI,WAAW;oBACrD,iBAAiB,OAAO,GAAG;oBAC3B,wBAAwB,GAAG,CAAC,GAAG;gBACnC,CAAC;gBACD,iBAAiB,OAAO,GAAG,iBAAiB,OAAO,GAAG;gBACtD,wBAAwB,GAAG,CAAC,GAAG;YACnC,CAAC;YACD,IAAI,KAAK,EAAE,IAAI,WAAW;gBACtB,IAAI,KAAK,OAAO,QAAQ,CAAC,KAAK,EAAE,CAAC,KAAK;gBACtC,IAAI,mBAAmB,wBAAwB,GAAG,CAAC;gBACnD,IAAI,wBAAwB,GAAG,CAAC,GAAG,OAAO,IAAI,WAAW;oBACrD,iBAAiB,OAAO,GAAG;oBAC3B,wBAAwB,GAAG,CAAC,GAAG;gBACnC,CAAC;gBACD,iBAAiB,OAAO,GAAG,iBAAiB,OAAO,GAAG;gBACtD,wBAAwB,GAAG,CAAC,GAAG;YACnC,CAAC;YACD,IAAI,KAAK,EAAE,IAAI,WAAW;gBACtB,IAAI,KAAK,OAAO,QAAQ,CAAC,KAAK,EAAE,CAAC,KAAK;gBACtC,IAAI,mBAAmB,wBAAwB,GAAG,CAAC;gBACnD,IAAI,wBAAwB,GAAG,CAAC,GAAG,UAAU,IAAI,WAAW;oBACxD,iBAAiB,UAAU,GAAG;oBAC9B,wBAAwB,GAAG,CAAC,GAAG;gBACnC,CAAC;gBACD,iBAAiB,UAAU,GAAG,iBAAiB,UAAU,GAAG;gBAC5D,wBAAwB,GAAG,CAAC,GAAG;YACnC,CAAC;YACD,IAAI,KAAK,EAAE,IAAI,WAAW;gBACtB,IAAI,KAAK,OAAO,QAAQ,CAAC,KAAK,EAAE,CAAC,KAAK;gBACtC,IAAI,mBAAmB,wBAAwB,GAAG,CAAC;gBACnD,IAAI,wBAAwB,GAAG,CAAC,GAAG,gBAAgB,IAAI,WAAW;oBAC9D,iBAAiB,gBAAgB,GAAG;oBACpC,wBAAwB,GAAG,CAAC,GAAG;gBACnC,CAAC;gBACD,iBAAiB,gBAAgB,GAAG,iBAAiB,gBAAgB,GAAG;gBACxE,wBAAwB,GAAG,CAAC,GAAG;YACnC,CAAC;YACD,IAAI,KAAK,EAAE,IAAI,WAAW;gBACtB,IAAI,KAAK,OAAO,QAAQ,CAAC,KAAK,EAAE,CAAC,KAAK;gBACtC,IAAI,mBAAmB,wBAAwB,GAAG,CAAC;gBACnD,IAAI,wBAAwB,GAAG,CAAC,GAAG,eAAe,IAAI,WAAW;oBAC7D,iBAAiB,eAAe,GAAG;oBACnC,wBAAwB,GAAG,CAAC,GAAG;gBACnC,CAAC;gBACD,iBAAiB,eAAe,GAAG,iBAAiB,eAAe,GAAG;gBACtE,wBAAwB,GAAG,CAAC,GAAG;YACnC,CAAC;YACD,IAAI,wBAAwB,GAAG,CAAC,GAAG,SAAS,IAAI,WAAW;gBACvD,IAAI,mBAAmB,wBAAwB,GAAG,CAAC;gBACnD,iBAAiB,SAAS,GAAG,IAAI;gBACjC,wBAAwB,GAAG,CAAC,GAAG;YACnC,CAAC;YACD,wBAAwB,GAAG,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC;QACjD;IACJ,GACC,IAAI,CAAC,IAAM;QACR,IAAI,8BAA8B;QAoBlC,OAAO,kDAA4B,6BAA6B,IAAI,CAAC,CAAA,OAAQ;YACzE,KAAK,OAAO,CAAC,CAAC,MAAM,IAAM;gBACtB,IAAI,IAAI,KAAK,CAAC,CAAC,KAAK;gBACpB,IAAI,IAAI,KAAK,CAAC,CAAC,KAAK;gBACpB,IAAI,cAAc,KAAK,WAAW,CAAC,KAAK;gBAExC,SAAS,GAAG,CAAC;gBAEb,IAAI,gCAAgC,GAAG,CAAC,MAAM,WAC1C,gCAAgC,GAAG,CAAC,GAAG,IAAI;gBAE/C,IAAI,gCAAgC,GAAG,CAAC,GAAG,GAAG,CAAC,MAAM,WACjD,gCAAgC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG;oBAAE,UAAU;gBAAE;gBAEhE,IAAI,KAAK,EAAE,IAAI,WAAW;oBACtB,IAAI,KAAK,OAAO,QAAQ,CAAC,KAAK,EAAE,CAAC,KAAK;oBACtC,IAAI,gCAAgC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,OAAO,IAAI,WACzD,gCAAgC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,OAAO,GAAG;oBAE5D,gCAAgC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,OAAO,GAAG,gCAAgC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,OAAO,GAAG;gBACpH,CAAC;gBACD,IAAI,KAAK,EAAE,IAAI,WAAW;oBACtB,IAAI,KAAK,OAAO,QAAQ,CAAC,KAAK,EAAE,CAAC,KAAK;oBACtC,IAAI,gCAAgC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,gBAAgB,IAAI,WAClE,gCAAgC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,gBAAgB,GAAG;oBAErE,gCAAgC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,gBAAgB,GAAG,gCAAgC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,gBAAgB,GAAG;gBACtI,CAAC;gBACD,IAAI,KAAK,EAAE,IAAI,WAAW;oBACtB,IAAI,KAAK,OAAO,QAAQ,CAAC,KAAK,EAAE,CAAC,KAAK;oBACtC,IAAI,gCAAgC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,eAAe,IAAI,WACjE,gCAAgC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,eAAe,GAAG;oBAEpE,gCAAgC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,eAAe,GAAG,gCAAgC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,eAAe,GAAG;gBACpI,CAAC;gBACD,IAAI,gCAAgC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,SAAS,IAAI,WAC3D,gCAAgC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,SAAS,GAAG,IAAI;gBAElE,gCAAgC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC;YAChE;QAEJ;IACJ,GACC,IAAI,CAAC,IAAM;QACR,SAAS,OAAO,CAAC,CAAA,YAAa;YAC1B,IAAI,iBAAiB,wBAAwB,GAAG,CAAC;YACjD,IAAI,YAAY;YAChB,IAAI,kBAAkB,WAClB,YAAY;gBAAE,OAAO;YAAU;YAEnC,IAAI,UAAU,SAAS,IAAI,WACvB,UAAU,SAAS,GAAG;mBAAI,UAAU,SAAS;aAAC;YAElD,IAAI,oBAAoB,gCAAgC,GAAG,CAAC;YAC5D,IAAI,qBAAqB,WAAW;gBAChC,UAAU,kBAAkB,GAAG,EAAE;gBACjC,kBAAkB,OAAO,CAAC,CAAC,uBAAuB,cAAc,OAAS;oBACrE,sBAAsB,SAAS,GAAG;2BAAI,sBAAsB,SAAS;qBAAC;oBACtE,UAAU,kBAAkB,CAAC,IAAI,CAAC;gBACtC;YACJ,CAAC;YACD,iBAAiB,IAAI,CAAC;QAC1B;QACA,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC;YAC7B,qBAAiB,iDAA2B;QAChD,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;QACA,QAAQ,GAAG,CAAC;IAChB,GACC,KAAK,CAAC,CAAA,QAAS;QACZ,QAAQ,GAAG,CAAC;QACZ,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC,EAAE;YAC/B,qBAAiB,iDAA2B;QAChD,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;IACJ;AACR;AAEA,SAAS,mDAA6B;IAClC,QAAQ,GAAG,CAAC;IACZ,IAAI,0BAA0B;IAa9B,IAAI,8BAA8B;IAYlC,IAAI,2BAA2B;IAa/B,IAAI,6BAA6B;IAajC,IAAI,gCAAgC,IAAI;IAExC,IAAI,yBAAyB,EAAE;IAC/B,OAAO,QAAQ,GAAG,CAAC;QACf,kDAA4B,yBACvB,IAAI,CAAC,CAAA,OAAQ;YACV,KAAK,OAAO,CAAC,CAAC,MAAM,IAAM;gBACtB,IAAI,cAAc,KAAK,WAAW,CAAC,KAAK;gBACxC,IAAI,MAAO,KAAK,CAAC,IAAI;gBACrB,IAAI,sBAAsB,8BAA8B,GAAG,CAAC;gBAC5D,IAAI,uBAAuB,WAAW;oBAClC,8BAA8B,GAAG,CAAC,aAAa;wBAAE,UAAU;oBAAY;oBACvE,sBAAsB,8BAA8B,GAAG,CAAC;gBAC5D,CAAC;gBACD,oBAAoB,GAAG,GAAG;gBAC1B,IAAI,KACA,oBAAoB,QAAQ,GAAG,KAAK,CAAC,CAAC,KAAK;gBAE/C,8BAA8B,GAAG,CAAC,aAAa;YACnD;QACJ;QACJ,kDAA4B,6BACvB,IAAI,CAAC,CAAA,OAAQ;YACV,KAAK,OAAO,CAAC,CAAC,MAAM,IAAM;gBACtB,IAAI,cAAc,KAAK,WAAW,CAAC,KAAK;gBACxC,IAAI,UAAW,KAAK,CAAC,IAAI;gBACzB,IAAI,sBAAsB,8BAA8B,GAAG,CAAC;gBAC5D,IAAI,uBAAuB,WAAW;oBAClC,8BAA8B,GAAG,CAAC,aAAa;wBAAE,UAAU;oBAAY;oBACvE,sBAAsB,8BAA8B,GAAG,CAAC;gBAC5D,CAAC;gBACD,oBAAoB,OAAO,GAAG;gBAC9B,IAAI,SACA,oBAAoB,YAAY,GAAG,KAAK,CAAC,CAAC,KAAK;gBAEnD,8BAA8B,GAAG,CAAC,aAAa;YACnD;QACJ,GACC,KAAK,CAAC,CAAA,QAAS;YACZ,QAAQ,GAAG,CAAC;QAChB;QAEJ,kDAA4B,0BACvB,IAAI,CAAC,CAAA,OAAQ;YACV,KAAK,OAAO,CAAC,CAAC,MAAM,IAAM;gBACtB,IAAI,cAAc,KAAK,WAAW,CAAC,KAAK;gBACxC,IAAI,OAAQ,KAAK,CAAC,IAAI;gBACtB,IAAI,sBAAsB,8BAA8B,GAAG,CAAC;gBAC5D,IAAI,uBAAuB,WAAW;oBAClC,8BAA8B,GAAG,CAAC,aAAa;wBAAE,UAAU;oBAAY;oBACvE,sBAAsB,8BAA8B,GAAG,CAAC;gBAC5D,CAAC;gBACD,oBAAoB,IAAI,GAAG;gBAC3B,IAAI,MACA,oBAAoB,SAAS,GAAG,KAAK,CAAC,CAAC,KAAK;gBAEhD,8BAA8B,GAAG,CAAC,aAAa;YACnD;QACJ,GACC,KAAK,CAAC,CAAA,QAAS;YACZ,QAAQ,GAAG,CAAC;QAChB;QAEJ,kDAA4B,4BACvB,IAAI,CAAC,CAAA,OAAQ;YACV,KAAK,OAAO,CAAC,CAAC,MAAM,IAAM;gBACtB,IAAI,cAAc,KAAK,WAAW,CAAC,KAAK;gBACxC,IAAI,SAAU,KAAK,CAAC,IAAI;gBACxB,IAAI,sBAAsB,8BAA8B,GAAG,CAAC;gBAC5D,IAAI,uBAAuB,WAAW;oBAClC,8BAA8B,GAAG,CAAC,aAAa;wBAAE,UAAU;oBAAY;oBACvE,sBAAsB,8BAA8B,GAAG,CAAC;gBAC5D,CAAC;gBACD,oBAAoB,MAAM,GAAG;gBAC7B,IAAI,QACA,oBAAoB,WAAW,GAAG,KAAK,CAAC,CAAC,KAAK;gBAElD,8BAA8B,GAAG,CAAC,aAAa;YACnD;YACA,8BAA8B,OAAO,CAAC,CAAC,MAAM,UAAU,MAAQ;gBAC3D,uBAAuB,IAAI,CAAC;YAChC;QACJ,GACC,KAAK,CAAC,CAAA,QAAS;YACZ,QAAQ,GAAG,CAAC;QAChB;KACP,EACI,OAAO,CAAC,IAAM;QACX,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC;YAC7B,qBAAiB,sDAAgC;QACrD,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;QACA,QAAQ,GAAG,CAAC;IAChB,GACC,KAAK,CAAC,CAAA,QAAS;QACZ,QAAQ,GAAG,CAAC;QACZ,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC,EAAE;YAC/B,qBAAiB,sDAAgC;QACrD,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;IACJ;AACR;AAEA,SAAS,0CAAoB;IACzB,QAAQ,GAAG,CAAC;IACZ,IAAI,wBAAwB;IAW5B,IAAI,eAAe,EAAE;IACrB,OAAO,kDAA4B,uBAC9B,IAAI,CAAC,CAAA,OAAQ;QACV,IAAI,WAAW,IAAI;QACnB,KAAK,OAAO,CAAC,CAAC,UAAU,IAAM;YAC1B,IAAI,WAAW,SAAS,WAAW,CAAC,KAAK;YACzC,IAAI,kBAAkB,OAAO,UAAU,CAAC,SAAS,OAAO,CAAC,KAAK,IAAI;YAClE,IAAI,QAAQ,SAAS,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,8BAA8B;YACnE,IAAI,OAAO,yCAAiB,SAAS,IAAI,CAAC,KAAK,EAAE;YAEjD,SAAS,GAAG,CAAC;YACb,aAAa,IAAI,CAAC;gBAAE,OAAO;gBAAO,MAAM;gBAAM,UAAU;gBAAU,SAAS;YAAgB;QAC/F;IACJ,GACC,IAAI,CAAC,IAAM;QACR,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC;YAC7B,qBAAiB,4CAAsB;QAC3C,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;QACA,QAAQ,GAAG,CAAC;IAChB,GACC,KAAK,CAAC,CAAA,QAAS;QACZ,QAAQ,GAAG,CAAC;QACZ,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC,EAAE;YAC/B,qBAAiB,4CAAsB;QAC3C,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;IACJ;AACR;AAEA,SAAS,+CAAyB;IAC9B,QAAQ,GAAG,CAAC;IACZ,IAAI,sBAAsB;IAY1B,IAAI,oBAAoB,EAAE;IAC1B,OAAO,kDAA4B,qBAC9B,IAAI,CAAC,CAAA,OAAQ;QACV,KAAK,OAAO,CAAC,CAAC,UAAU,IAAM;YAC1B,IAAI,WAAW,SAAS,WAAW,CAAC,KAAK;YACzC,IAAI,uBAAuB,OAAO,UAAU,CAAC,SAAS,OAAO,CAAC,KAAK,IAAI;YACvE,IAAI,QAAQ,SAAS,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,8BAA8B;YACnE,IAAI,OAAO,yCAAiB,SAAS,IAAI,CAAC,KAAK,EAAE;YAEjD,kBAAkB,IAAI,CAAC;gBAAE,OAAO;gBAAO,MAAM;gBAAM,UAAU;gBAAU,SAAS;YAAqB;QACzG;IAEJ,GACC,IAAI,CAAC,IAAM;QACR,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC;YAC7B,qBAAiB,iDAA2B;QAChD,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;QACA,QAAQ,GAAG,CAAC;IAChB,GACC,KAAK,CAAC,CAAA,QAAS;QACZ,QAAQ,GAAG,CAAC;QACZ,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC,EAAE;YAC/B,qBAAiB,iDAA2B;QAChD,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;IACJ;AACR;AAEA,SAAS,iDAA2B;IAChC,QAAQ,GAAG,CAAC;IACZ,IAAI,wBAAwB;IAY5B,IAAI,uBAAuB,EAAE;IAC7B,kDAA4B,uBAAuB,IAAI,CAAC,CAAA,OAAQ;QAC5D,KAAK,OAAO,CAAC,CAAC,UAAU,IAAM;YAC1B,IAAI,WAAW,SAAS,WAAW,CAAC,KAAK;YACzC,IAAI,0BAA0B,OAAO,UAAU,CAAC,SAAS,OAAO,CAAC,KAAK,IAAI;YAC1E,IAAI,QAAQ,SAAS,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,8BAA8B;YACnE,IAAI,OAAO,yCAAiB,SAAS,IAAI,CAAC,KAAK,EAAE;YAEjD,qBAAqB,IAAI,CAAC;gBAAE,OAAO;gBAAO,MAAM;gBAAM,UAAU;gBAAU,SAAS;YAAwB;QAC/G;IACJ,GACK,IAAI,CAAC,IAAM;QACR,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC;YAC7B,qBAAiB,oDAA8B;QACnD,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;QACA,QAAQ,GAAG,CAAC;IAChB,GACC,KAAK,CAAC,CAAA,QAAS;QACZ,QAAQ,GAAG,CAAC;QACZ,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC,EAAE;YAC/B,qBAAiB,oDAA8B;QACnD,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;IACJ;AACR;AAEA,SAAS,0CAAoB;IACzB,QAAQ,GAAG,CAAC;IACZ,IAAI,iBAAiB;IAarB,IAAI,gBAAgB,EAAE;IACtB,OAAO,yCAAmB,gBAAgB,IAAI,CAAC,CAAA,OAAQ;QACnD,IAAI,WAAW,IAAI;QACnB,KAAK,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,UAAU,IAAM;YAC3C,IAAI,WAAW,SAAS,WAAW,CAAC,KAAK;YACzC,IAAI,mBAAmB,OAAO,UAAU,CAAC,SAAS,OAAO,CAAC,KAAK,IAAI;YACnE,IAAI,QAAQ,SAAS,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,8BAA8B;YACnE,IAAI,OAAO,yCAAiB,SAAS,IAAI,CAAC,KAAK,EAAE;YAEjD,SAAS,GAAG,CAAC;YACb,cAAc,IAAI,CAAC;gBAAE,OAAO;gBAAO,MAAM;gBAAM,UAAU;gBAAU,SAAS;YAAiB;QACjG;IACJ,GACK,IAAI,CAAC,IAAM;QACR,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC;YAC7B,qBAAiB,8CAAwB;QAC7C,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;QACA,QAAQ,GAAG,CAAC;IAChB,GACC,KAAK,CAAC,CAAA,QAAS;QACZ,QAAQ,GAAG,CAAC;QACZ,IAAI;YACA,IAAI,UAAU,KAAK,SAAS,CAAC,EAAE;YAC/B,qBAAiB,8CAAwB;QAC7C,EAAE,OAAO,KAAK;YACV,QAAQ,KAAK,CAAC;QAClB;IACJ;AACR;AAEA,QAAQ,UAAU,CAAC;IACf;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACH,EACI,KAAK,CAAC,CAAA,QAAS;IACZ,QAAQ,GAAG,CAAC;AAChB","sources":["src/dataCaching.ts","src/GlobalUtils.ts","src/LogUtils.ts"],"sourcesContent":["import * as fs from 'node:fs';\nimport dayjs from \"dayjs\";\nimport duration from 'dayjs/plugin/duration.js';\nimport customParseFormat from 'dayjs/plugin/customParseFormat.js';\nimport relativeTime from 'dayjs/plugin/relativeTime.js';\ndayjs.extend(duration);\ndayjs.extend(relativeTime)\ndayjs.extend(customParseFormat)\ndayjs.extend(duration)\nimport md5 from 'md5';\nimport * as Global from \"./GlobalUtils\";\n\nconst queryPaginationSize = 500;\n\nconst dataFilePrefix = \"./data/cache/\";\nconst graphLists = fs.readFileSync(dataFilePrefix + 'runSets.json');\nconst timezoneMap = fs.readFileSync(dataFilePrefix + 'timezoneMap.json');\nconst endpointIpMap = fs.readFileSync(dataFilePrefix + 'endpointIpGeoloc.json');\n\nconst whiteListFilename = dataFilePrefix + \"whiteLists.json\";\nconst geolocFilename = dataFilePrefix + \"geolocData.json\";\nconst sparqlCoverageFilename = dataFilePrefix + \"sparqlCoverageData.json\";\nconst sparqlFeaturesFilename = dataFilePrefix + \"sparqlFeaturesData.json\";\nconst vocabEndpointFilename = dataFilePrefix + \"vocabEndpointData.json\";\nconst knownVocabsFilename = dataFilePrefix + \"knownVocabsData.json\";\nconst vocabKeywordsFilename = dataFilePrefix + \"vocabKeywordsData.json\";\nconst tripleCountFilename = dataFilePrefix + \"tripleCountData.json\";\nconst classCountFilename = dataFilePrefix + \"classCountData.json\";\nconst propertyCountFilename = dataFilePrefix + \"propertyCountData.json\";\nconst categoryTestCountFilename = dataFilePrefix + \"categoryTestCountData.json\";\nconst totalCategoryTestCountFilename = dataFilePrefix + \"totalCategoryTestCountData.json\";\nconst endpointTestsDataFilename = dataFilePrefix + \"endpointTestsData.json\";\nconst totalRuntimeDataFilename = dataFilePrefix + \"totalRuntimeData.json\";\nconst averageRuntimeDataFilename = dataFilePrefix + \"averageRuntimeData.json\";\nconst classPropertyDataFilename = dataFilePrefix + \"classPropertyData.json\";\nconst datasetDescriptionDataFilename = dataFilePrefix + \"datasetDescriptionData.json\";\nconst shortUriDataFilename = dataFilePrefix + \"shortUriData.json\";\nconst rdfDataStructureDataFilename = dataFilePrefix + \"rdfDataStructureData.json\";\nconst readableLabelDataFilename = dataFilePrefix + \"readableLabelData.json\";\nconst blankNodesDataFilename = dataFilePrefix + \"blankNodesData.json\";\n\nconst LOVFilename = dataFilePrefix + \"knownVocabulariesLOV.json\"\n\nfunction generateGraphValueFilterClause(graphList) {\n    let result = \"FILTER( \";\n    graphList.forEach((item, i) => {\n        if (i > 0) {\n            result += \" || REGEX( str(?g) , '\" + item + \"' )\";\n        } else {\n            result += \"REGEX( str(?g) , '\" + item + \"' )\";\n        }\n    });\n    result += \" )\";\n    return result;\n}\n\nfunction sparqlQueryPromise(query) {\n    if (query.includes(\"SELECT\") || query.includes(\"ASK\")) {\n        return Global.fetchJSONPromise('http://prod-dekalog.inria.fr/sparql?query=' + encodeURIComponent(query) + '&format=json');\n    }\n    else {\n        throw \"ERROR \" + query;\n    }\n}\n\nfunction paginatedSparqlQueryPromise(query, limit = queryPaginationSize, offset = 0, finalResult = []) {\n    let paginatedQuery = query + \" LIMIT \" + limit + \" OFFSET \" + offset;\n    return sparqlQueryPromise(paginatedQuery)\n        .then(queryResult => {\n            queryResult.results.bindings.forEach(resultItem => {\n                let finaResultItem = {};\n                queryResult.head.vars.forEach(variable => {\n                    finaResultItem[variable] = resultItem[variable];\n                })\n                finalResult.push(finaResultItem);\n            })\n            if (queryResult.results.bindings.length > 0) {\n                return paginatedSparqlQueryPromise(query, limit + queryPaginationSize, offset + queryPaginationSize, finalResult)\n            }\n        })\n        .then(() => {\n            return finalResult;\n        })\n        .catch(error => {\n            console.log(error)\n            return finalResult;\n        })\n        .finally(() => {\n            return finalResult;\n        })\n}\n\nfunction whiteListFill() {\n    console.log(\"whiteListFill START\")\n    return Promise.all(\n        graphLists.map(graphListItem => {\n            let graphList = graphListItem.graphs\n            let endpointListQuery = 'SELECT DISTINCT ?endpointUrl WHERE {' +\n                ' GRAPH ?g { ' +\n                \"{ ?curated <http://www.w3.org/ns/sparql-service-description#endpoint> ?endpointUrl . }\" +\n                \"UNION { ?curated <http://rdfs.org/ns/void#sparqlEndpoint> ?endpointUrl . } \" +\n                \"UNION { ?curated <http://www.w3.org/ns/dcat#endpointURL> ?endpointUrl . }\" +\n                '?metadata <http://ns.inria.fr/kg/index#curated> ?curated . ' +\n                '} ' +\n                generateGraphValueFilterClause(graphList) +\n                '} ' +\n                'GROUP BY ?endpointUrl';\n            let graphListKey = md5(''.concat(graphList));\n            return paginatedSparqlQueryPromise(endpointListQuery)\n                .then(json => {\n                    let endpointList = [];\n                    json.forEach((item) => {\n                        endpointList.push(item.endpointUrl.value);\n                    });\n                    return { graphKey: graphListKey, endpoints: endpointList };\n                });\n        }))\n        .then(graphListItemArray => {\n            let tmpWhiteListMap = {};\n            graphListItemArray.forEach(graphListItem => {\n                tmpWhiteListMap[graphListItem.graphKey] = graphListItem.endpoints;\n            });\n            try {\n                let content = JSON.stringify(tmpWhiteListMap);\n                fs.writeFileSync(whiteListFilename, content)\n                console.log(\"whiteListFill END\")\n            } catch (err) {\n                console.error(err)\n            }\n        }).catch(error => {\n            console.log(error)\n            try {\n                let content = JSON.stringify([]);\n                fs.writeFileSync(whiteListFilename, content)\n                console.log(\"whiteListFill END\")\n            } catch (err) {\n                console.error(err)\n            }\n        });\n}\n\ntype EndpointItem = {\n    endpoint: string\n    lat: number\n    lon: number\n    country: string\n    region: string\n    city: string\n    org: string\n    timezone: string\n    sparqlTimezone: string\n    popupHTML: string\n}\n\nfunction endpointMapfill() {\n    console.log(\"endpointMapfill START\")\n    let endpointGeolocData = [];\n\n    // Marked map with the geoloc of each endpoint\n    return Promise.all(endpointIpMap.map((item) => {\n        // Add the markers for each endpoints.\n        let endpoint = item.key;\n        let endpointItem: EndpointItem;\n\n        let timezoneSPARQLquery = \"SELECT DISTINCT ?timezone { GRAPH ?g { ?base <http://www.w3.org/ns/sparql-service-description#endpoint> <\" + endpoint + \"> . ?metadata <http://ns.inria.fr/kg/index#curated> ?base . ?base <https://schema.org/broadcastTimezone> ?timezone } }\";\n        return paginatedSparqlQueryPromise(timezoneSPARQLquery)\n            .then(jsonResponse => {\n                let endpointTimezoneSPARQL = new Map();\n                jsonResponse.forEach((itemResponse, i) => {\n                    endpointTimezoneSPARQL.set(endpoint, itemResponse.timezone.value);\n                });\n\n                let ipTimezoneArrayFiltered = timezoneMap.filter(itemtza => itemtza.key == item.value.geoloc.timezone);\n                let ipTimezone;\n                if (ipTimezoneArrayFiltered.length > 0) {\n                    ipTimezone = ipTimezoneArrayFiltered[0].value.utc_offset.padStart(6, '-').padStart(6, '+');\n                }\n                let sparqlTimezone;\n                if (endpointTimezoneSPARQL.get(endpoint) != undefined) {\n                    sparqlTimezone = endpointTimezoneSPARQL.get(endpoint).padStart(6, '-').padStart(6, '+');\n                }\n\n                endpointItem = { endpoint: endpoint, lat: item.value.geoloc.lat, lon: item.value.geoloc.lon, country: \"\", region: \"\", city: \"\", org: \"\", timezone: ipTimezone, sparqlTimezone: sparqlTimezone, popupHTML: \"\" };\n                if (item.value.geoloc.country != undefined) {\n                    endpointItem.country = item.value.geoloc.country;\n                }\n                if (item.value.geoloc.regionName != undefined) {\n                    endpointItem.region = item.value.geoloc.regionName;\n                }\n                if (item.value.geoloc.city != undefined) {\n                    endpointItem.city = item.value.geoloc.city;\n                }\n                if (item.value.geoloc.org != undefined) {\n                    endpointItem.org = item.value.geoloc.org;\n                }\n                let labelQuery = \"SELECT DISTINCT ?label  { GRAPH ?g { ?dataset <http://rdfs.org/ns/void#sparqlEndpoint> <\" + endpoint + \"> . { ?dataset <http://www.w3.org/2000/01/rdf-schema#label> ?label } UNION { ?dataset <http://www.w3.org/2004/02/skos/core#prefLabel> ?label } UNION { ?dataset <http://purl.org/dc/terms/title> ?label } UNION { ?dataset <http://xmlns.com/foaf/0.1/name> ?label } UNION { ?dataset <http://schema.org/name> ?label } . }  }\";\n                return labelQuery;\n            })\n            .then(labelQuery => sparqlQueryPromise(labelQuery)\n                .then(responseLabels => {\n                    let popupString = \"<table> <thead> <tr> <th colspan='2'> <a href='\" + endpointItem.endpoint + \"' >\" + endpointItem.endpoint + \"</a> </th> </tr> </thead>\";\n                    popupString += \"</body>\"\n                    if (endpointItem.country != undefined) {\n                        popupString += \"<tr><td>Country: </td><td>\" + endpointItem.country + \"</td></tr>\";\n                    }\n                    if (endpointItem.region != undefined) {\n                        popupString += \"<tr><td>Region: </td><td>\" + endpointItem.region + \"</td></tr>\";\n                    }\n                    if (endpointItem.city != undefined) {\n                        popupString += \"<tr><td>City: </td><td>\" + endpointItem.city + \"</td></tr>\";\n                    }\n                    if (endpointItem.org != undefined) {\n                        popupString += \"<tr><td>Organization: </td><td>\" + endpointItem.org + \"</td></tr>\";\n                    }\n                    if (endpointItem.timezone != undefined) {\n                        popupString += \"<tr><td>Timezone of endpoint URL: </td><td>\" + endpointItem.timezone + \"</td></tr>\";\n                        if (endpointItem.sparqlTimezone != undefined) {\n                            let badTimezone = endpointItem.timezone.localeCompare(endpointItem.sparqlTimezone) != 0;\n                            if (badTimezone) {\n                                popupString += \"<tr><td>Timezone declared by endpoint: </td><td>\" + endpointItem.sparqlTimezone + \"</td></tr>\";\n                            }\n                        }\n                    }\n                    if (responseLabels.results.bindings.size > 0) {\n                        popupString += \"<tr><td colspan='2'>\" + responseLabels + \"</td></tr>\";\n                    }\n                    popupString += \"</tbody>\"\n                    popupString += \"</table>\"\n                    endpointItem.popupHTML = popupString;\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n            ).then(() => {\n                endpointGeolocData.push(endpointItem);\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }))\n        .finally(() => {\n            try {\n                let content = JSON.stringify(endpointGeolocData);\n                fs.writeFileSync(geolocFilename, content)\n                console.log(\"endpointMapfill END\")\n            } catch (err) {\n                console.error(err)\n            }\n        })\n        .catch(error => {\n            console.log(error)\n            try {\n                let content = JSON.stringify([]);\n                fs.writeFileSync(geolocFilename, content)\n                console.log(\"endpointMapfill END\")\n            } catch (err) {\n                console.error(err)\n            }\n        })\n\n}\n\nfunction SPARQLCoverageFill() {\n    console.log(\"SPARQLCoverageFill START\")\n    // Create an histogram of the SPARQLES rules passed by endpoint.\n    let sparqlesFeatureQuery = 'SELECT DISTINCT ?endpoint ?sparqlNorm (COUNT(DISTINCT ?activity) AS ?count) { ' +\n        'GRAPH ?g { ' +\n        '?base <http://www.w3.org/ns/sparql-service-description#endpoint> ?endpoint . ' +\n        '?metadata <http://ns.inria.fr/kg/index#curated> ?base . ' +\n        'OPTIONAL { ' +\n        '?base <http://www.w3.org/ns/prov#wasGeneratedBy> ?activity . ' +\n        'FILTER(CONTAINS(str(?activity), ?sparqlNorm)) ' +\n        'VALUES ?sparqlNorm { \"SPARQL10\" \"SPARQL11\" } ' +\n        '} ' +\n        '} ' +\n        '} ' +\n        'GROUP BY ?endpoint ?sparqlNorm ';\n    let jsonBaseFeatureSparqles = [];\n    let sparqlFeaturesDataArray = [];\n    return paginatedSparqlQueryPromise(sparqlesFeatureQuery)\n        .then(json => {\n            let endpointSet = new Set();\n            let sparql10Map = new Map();\n            let sparql11Map = new Map();\n            json.forEach((bindingItem, i) => {\n                let endpointUrl = bindingItem.endpoint.value;\n                endpointSet.add(endpointUrl);\n                let feature = undefined;\n                if (bindingItem.sparqlNorm != undefined) {\n                    feature = bindingItem.sparqlNorm.value;\n                }\n                let count = bindingItem.count.value;\n                if (feature == undefined || feature.localeCompare(\"SPARQL10\") == 0) {\n                    sparql10Map.set(endpointUrl, Number(count));\n                }\n                if (feature == undefined || feature.localeCompare(\"SPARQL11\") == 0) {\n                    sparql11Map.set(endpointUrl, Number(count));\n                }\n            });\n\n            endpointSet.forEach((item) => {\n                let sparql10 = sparql10Map.get(item);\n                let sparql11 = sparql11Map.get(item);\n                if (sparql10 == undefined) {\n                    sparql10 = 0;\n                }\n                if (sparql11 == undefined) {\n                    sparql11 = 0;\n                }\n                let sparqlJSONObject = { 'endpoint': item, 'sparql10': sparql10, 'sparql11': sparql11, 'sparqlTotal': (sparql10 + sparql11) };\n                jsonBaseFeatureSparqles.push(sparqlJSONObject);\n            });\n\n\n        })\n        .then(() => {\n            const sparqlFeatureQuery = 'SELECT DISTINCT ?endpoint ?activity { ' +\n                'GRAPH ?g { ' +\n                '?base <http://www.w3.org/ns/sparql-service-description#endpoint> ?endpoint . ' +\n                '?metadata <http://ns.inria.fr/kg/index#curated> ?base . ' +\n                'OPTIONAL { ' +\n                '?base <http://www.w3.org/ns/prov#wasGeneratedBy> ?activity . ' +\n                'FILTER(CONTAINS(str(?activity), ?sparqlNorm)) ' +\n                'VALUES ?sparqlNorm { \"SPARQL10\" \"SPARQL11\" } ' +\n                '} ' +\n                '} ' +\n                '} ' +\n                'GROUP BY ?endpoint ?activity ';\n            let endpointFeatureMap = new Map();\n            let featuresShortName = new Map();\n            return paginatedSparqlQueryPromise(sparqlFeatureQuery)\n                .then(json => {\n                    endpointFeatureMap = new Map();\n                    let featuresSet = new Set();\n                    json.forEach(bindingItem => {\n                        const endpointUrl = bindingItem.endpoint.value;\n                        if (!endpointFeatureMap.has(endpointUrl)) {\n                            endpointFeatureMap.set(endpointUrl, new Set());\n                        }\n                        if (bindingItem.activity != undefined) {\n                            const activity = bindingItem.activity.value;\n                            if (!endpointFeatureMap.has(endpointUrl)) {\n                                endpointFeatureMap.set(endpointUrl, new Set());\n                            }\n                            featuresSet.add(activity);\n                            if (featuresShortName.get(activity) == undefined) {\n                                featuresShortName.set(activity, activity.replace(\"https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/sparqles/SPARQL10/SPARQLES_\", \"sparql10:\").replace(\"https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/sparqles/SPARQL11/SPARQLES_\", \"sparql11:\").replace(\".ttl#activity\", \"\"))\n                            }\n                            endpointFeatureMap.get(endpointUrl).add(featuresShortName.get(activity));\n                        }\n                    });\n                    endpointFeatureMap.forEach((featureSet, endpointUrl, map) => {\n                        let sortedFeatureArray = [...featureSet].sort((a, b) => a.localeCompare(b));\n                        sparqlFeaturesDataArray.push({ endpoint: endpointUrl, features: sortedFeatureArray });\n                    });\n\n                    sparqlFeaturesDataArray.sort((a, b) => {\n                        return a.endpoint.localeCompare(b.endpoint);\n                    });\n                })\n        })\n        .finally(() => {\n            try {\n                let content = JSON.stringify(jsonBaseFeatureSparqles);\n                fs.writeFileSync(sparqlCoverageFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n            try {\n                let content = JSON.stringify(sparqlFeaturesDataArray);\n                fs.writeFileSync(sparqlFeaturesFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n            console.log(\"SPARQLCoverageFill END\")\n        })\n        .catch(error => {\n            console.log(error)\n            try {\n                let content = JSON.stringify([]);\n                fs.writeFileSync(sparqlCoverageFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n            try {\n                let content = JSON.stringify([]);\n                fs.writeFileSync(sparqlFeaturesFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n        })\n}\n\nfunction vocabFill() {\n    console.log(\"vocabFill START\")\n    // Create an force graph with the graph linked by co-ocurrence of vocabularies\n    let sparqlesVocabulariesQuery = \"SELECT DISTINCT ?endpointUrl ?vocabulary { GRAPH ?g { \" +\n        \"{ ?dataset <http://www.w3.org/ns/sparql-service-description#endpoint> ?endpointUrl . }\" +\n        \"UNION { ?dataset <http://rdfs.org/ns/void#sparqlEndpoint> ?endpointUrl . } \" +\n        \"UNION { ?dataset <http://www.w3.org/ns/dcat#endpointURL> ?endpointUrl . }\" +\n        \"?metadata <http://ns.inria.fr/kg/index#curated> ?dataset . \" +\n        \"?dataset <http://rdfs.org/ns/void#vocabulary> ?vocabulary \" +\n        \"} \" +\n        \" } \" +\n        \"GROUP BY ?endpointUrl ?vocabulary \";\n    let knownVocabularies = new Set();\n    let rawGatherVocab = new Map();\n    let gatherVocabData = [];\n    let rawVocabSet = new Set();\n    let vocabSet = new Set();\n    let keywordSet = new Set();\n    let vocabKeywordData = [];\n\n    return paginatedSparqlQueryPromise(sparqlesVocabulariesQuery)\n        .then(json => {\n\n            let endpointSet = new Set();\n            json.forEach((bindingItem, i) => {\n                let vocabulariUri = bindingItem.vocabulary.value;\n                let endpointUri = bindingItem.endpointUrl.value;\n                endpointSet.add(endpointUri);\n                rawVocabSet.add(vocabulariUri);\n                if (!rawGatherVocab.has(endpointUri)) {\n                    rawGatherVocab.set(endpointUri, new Set());\n                }\n                rawGatherVocab.get(endpointUri).add(vocabulariUri);\n            });\n\n            // https://obofoundry.org/ // No ontology URL available in ontology description\n            // http://prefix.cc/context // done\n            // http://data.bioontology.org/resource_index/resources?apikey=b86b12d8-dc46-4528-82e3-13fbdabf5191 // No ontology URL available in ontology description\n            // https://lov.linkeddata.es/dataset/lov/api/v2/vocabulary/list // done\n\n            // Retrieval of the list of LOV vocabularies to filter the ones retrieved in the index\n        })\n        .then(Global.fetchJSONPromise(\"https://lov.linkeddata.es/dataset/lov/api/v2/vocabulary/list\")\n            .then(responseLOV => {\n                responseLOV.forEach((item, i) => {\n                    knownVocabularies.add(item.uri)\n                });\n                try {\n                    let content = JSON.stringify(responseLOV);\n                    fs.writeFileSync(LOVFilename, content)\n                } catch (err) {\n                    console.error(err)\n                }\n            }))\n        .then(Global.fetchJSONPromise(\"http://prefix.cc/context\")\n            .then(responsePrefixCC => {\n                for (let prefix of Object.keys(responsePrefixCC['@context'])) {\n                    knownVocabularies.add(responsePrefixCC['@context'][prefix])\n                };\n            }))\n        .then(Global.fetchJSONPromise(\"https://www.ebi.ac.uk/ols/api/ontologies?page=0&size=1000\")\n            .then(responseOLS => {\n                responseOLS._embedded.ontologies.forEach(ontologyItem => {\n                    if (ontologyItem.config.baseUris.length > 0) {\n                        let ontology = ontologyItem.config.baseUris[0]\n                        knownVocabularies.add(ontology);\n                    }\n                });\n            }))\n        .then(() => {\n            // Filtering according to ontology repositories\n            rawVocabSet.forEach(vocabulariUri => {\n                if (knownVocabularies.has(vocabulariUri)) {\n                    vocabSet.add(vocabulariUri);\n                }\n            });\n            rawGatherVocab.forEach((vocabulariUriSet, endpointUri, map) => {\n                gatherVocabData.push({ endpoint: endpointUri, vocabularies: [...vocabulariUriSet] })\n            });\n\n            let queryArray = [];\n            let vocabArray = [...vocabSet];\n            for (let i = 20; i < vocabArray.length + 20; i += 20) {\n                let vocabSetSlice = vocabArray.slice(i - 20, i); // Slice the array into arrays of 20 elements\n                // Endpoint and vocabulary keywords graph\n                let vocabularyQueryValues = \"\";\n                vocabSetSlice.forEach((item, i) => {\n                    vocabularyQueryValues += \"<\" + item + \">\";\n                    vocabularyQueryValues += \" \";\n                });\n\n                let keywordLOVQuery = \"SELECT DISTINCT ?vocabulary ?keyword { \" +\n                    \"GRAPH <https://lov.linkeddata.es/dataset/lov> { \" +\n                    \"   ?vocabulary a <http://purl.org/vocommons/voaf#Vocabulary> . \" +\n                    \"   ?vocabulary <http://www.w3.org/ns/dcat#keyword> ?keyword . \" +\n                    \"} \" +\n                    \"VALUES ?vocabulary { \" + vocabularyQueryValues + \" } \" +\n                    \"}\"\n                queryArray.push(Global.fetchJSONPromise(\"https://lov.linkeddata.es/dataset/lov/sparql?query=\" + encodeURIComponent(keywordLOVQuery) + \"&format=json\"));\n            }\n\n            return Promise.all(queryArray)\n                .then(jsonKeywordsArray => {\n                    let vocabKeywordMap = new Map();\n                    jsonKeywordsArray.forEach(jsonKeywords => {\n                        jsonKeywords.results.bindings.forEach((keywordItem, i) => {\n                            let keyword = keywordItem.keyword.value;\n                            let vocab = keywordItem.vocabulary.value;\n                            if (vocabKeywordMap.get(vocab) == undefined) {\n                                vocabKeywordMap.set(vocab, []);\n                            }\n                            vocabKeywordMap.get(vocab).push(keyword);\n\n                            keywordSet.add(keyword);\n                        });\n                    })\n                    vocabKeywordMap.forEach((keywordList, vocab) => {\n                        vocabKeywordData.push({ vocabulary: vocab, keywords: keywordList })\n                    })\n                })\n        })\n        .finally(() => {\n            try {\n                let content = JSON.stringify(gatherVocabData);\n                fs.writeFileSync(vocabEndpointFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n        })\n        .finally(() => {\n            try {\n                let content = JSON.stringify([...knownVocabularies]);\n                fs.writeFileSync(knownVocabsFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n        })\n        .finally(() => {\n            try {\n                let content = JSON.stringify(vocabKeywordData);\n                fs.writeFileSync(vocabKeywordsFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n            console.log(\"vocabFill END\")\n        })\n        .catch(error => {\n            console.log(error)\n            try {\n                let content = JSON.stringify([]);\n                fs.writeFileSync(vocabEndpointFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n            try {\n                let content = JSON.stringify([]);\n                fs.writeFileSync(knownVocabsFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n            try {\n                let content = JSON.stringify([]);\n                fs.writeFileSync(vocabKeywordsFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n        })\n}\n\nfunction tripleDataFill() {\n    console.log(\"tripleDataFill START\")\n    // Scatter plot of the number of triples through time\n    let triplesSPARQLquery = \"SELECT DISTINCT ?g ?date ?endpointUrl (MAX(?rawO) AS ?o) { \" +\n        \"GRAPH ?g {\" +\n        \"{ ?curated <http://www.w3.org/ns/sparql-service-description#endpoint> ?endpointUrl . }\" +\n        \"UNION { ?curated <http://rdfs.org/ns/void#sparqlEndpoint> ?endpointUrl . } \" +\n        \"UNION { ?curated <http://www.w3.org/ns/dcat#endpointURL> ?endpointUrl . }\" +\n        \"?metadata <http://ns.inria.fr/kg/index#curated> ?curated . \" +\n        \"?metadata <http://purl.org/dc/terms/modified> ?date . \" +\n        \"?curated <http://rdfs.org/ns/void#triples> ?rawO .\" +\n        \"}\" +\n        \"} GROUP BY ?g ?date ?endpointUrl ?o\";\n    let endpointTripleData = [];\n    return paginatedSparqlQueryPromise(triplesSPARQLquery)\n        .then(json => {\n            json.forEach((itemResult, i) => {\n                let graph = itemResult.g.value.replace('http://ns.inria.fr/indegx#', '');\n                let date = Global.parseDate(itemResult.date.value, 'YYYY-MM-DDTHH:mm:ss');\n                let endpointUrl = itemResult.endpointUrl.value;\n                let triples = Number.parseInt(itemResult.o.value);\n                endpointTripleData.push({ endpoint: endpointUrl, graph: graph, date: date, triples: triples })\n            });\n        })\n        .then(() => {\n            try {\n                let content = JSON.stringify(endpointTripleData);\n                fs.writeFileSync(tripleCountFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n            console.log(\"tripleDataFill END\")\n        })\n        .catch(error => {\n            console.log(error)\n            try {\n                let content = JSON.stringify([]);\n                fs.writeFileSync(tripleCountFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n        });\n}\n\nfunction classDataFill() {\n    console.log(\"classDataFill START\")\n    // Scatter plot of the number of classes through time\n    let classesSPARQLquery = \"SELECT DISTINCT ?g ?date ?endpointUrl (MAX(?rawO) AS ?o) ?modifDate { \" +\n        \"GRAPH ?g {\" +\n        \"{ ?curated <http://www.w3.org/ns/sparql-service-description#endpoint> ?endpointUrl . } \" +\n        \"UNION { ?curated <http://rdfs.org/ns/void#sparqlEndpoint> ?endpointUrl . } \" +\n        \"UNION { ?curated <http://www.w3.org/ns/dcat#endpointURL> ?endpointUrl . }\" +\n        \"?metadata <http://ns.inria.fr/kg/index#curated> ?curated . \" +\n        \"?metadata <http://purl.org/dc/terms/modified> ?date . \" +\n        \"?base <http://rdfs.org/ns/void#classes> ?rawO .\" +\n        \"}\" +\n        \"} GROUP BY ?g ?date ?endpointUrl ?modifDate ?o\";\n    let endpointClassCountData = [];\n    return paginatedSparqlQueryPromise(classesSPARQLquery)\n        .then(json => {\n            json.forEach((itemResult, i) => {\n                let graph = itemResult.g.value.replace('http://ns.inria.fr/indegx#', '');\n                let date = Global.parseDate(itemResult.date.value, 'YYYY-MM-DDTHH:mm:ss');\n                let endpointUrl = itemResult.endpointUrl.value;\n                let triples = Number.parseInt(itemResult.o.value);\n                endpointClassCountData.push({ endpoint: endpointUrl, graph: graph, date: date, classes: triples })\n            });\n\n        })\n        .then(() => {\n            try {\n                let content = JSON.stringify(endpointClassCountData);\n                fs.writeFileSync(classCountFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n            console.log(\"classDataFill END\")\n        })\n        .catch(error => {\n            console.log(error)\n            try {\n                let content = JSON.stringify([]);\n                fs.writeFileSync(classCountFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n        });\n}\n\nfunction propertyDataFill() {\n    console.log(\"propertyDataFill START\")\n    // scatter plot of the number of properties through time\n    let propertiesSPARQLquery = \"SELECT DISTINCT ?g ?date ?endpointUrl (MAX(?rawO) AS ?o) { \" +\n        \"GRAPH ?g {\" +\n        \"{ ?curated <http://www.w3.org/ns/sparql-service-description#endpoint> ?endpointUrl . } \" +\n        \"UNION { ?curated <http://rdfs.org/ns/void#sparqlEndpoint> ?endpointUrl . } \" +\n        \"UNION { ?curated <http://www.w3.org/ns/dcat#endpointURL> ?endpointUrl . }\" +\n        \"?metadata <http://ns.inria.fr/kg/index#curated> ?curated . \" +\n        \"?metadata <http://purl.org/dc/terms/modified> ?date . \" +\n        \"?base <http://rdfs.org/ns/void#properties> ?rawO .\" +\n        \"}\" +\n        \"} GROUP BY ?endpointUrl ?g ?date ?o\";\n    let endpointPropertyCountData = [];\n    return paginatedSparqlQueryPromise(propertiesSPARQLquery)\n        .then(json => {\n            json.forEach((itemResult, i) => {\n                let graph = itemResult.g.value.replace('http://ns.inria.fr/indegx#', '');\n                let endpointUrl = itemResult.endpointUrl.value;\n                let properties = Number.parseInt(itemResult.o.value);\n                let date = Global.parseDate(itemResult.date.value, 'YYYY-MM-DDTHH:mm:ss');\n                endpointPropertyCountData.push({ endpoint: endpointUrl, graph: graph, date: date, properties: properties })\n            });\n        })\n        .then(() => {\n            try {\n                let content = JSON.stringify(endpointPropertyCountData);\n                fs.writeFileSync(propertyCountFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n            console.log(\"propertyDataFill END\")\n        })\n        .catch(error => {\n            console.log(error)\n            try {\n                let content = JSON.stringify([]);\n                fs.writeFileSync(propertyCountFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n        });\n}\n\nfunction categoryTestCountFill() {\n    console.log(\"categoryTestCountFill START\")\n    let testCategoryData = [];\n    // Number of tests passed by test categories\n    let testCategoryQuery = \"SELECT DISTINCT ?g ?date ?category (count(DISTINCT ?test) AS ?count) ?endpointUrl { \" +\n        \"GRAPH ?g { ?metadata <http://ns.inria.fr/kg/index#curated> ?curated . \" +\n        \"?metadata <http://ns.inria.fr/kg/index#trace> ?trace . \" +\n        \"{ ?curated <http://www.w3.org/ns/sparql-service-description#endpoint> ?endpointUrl . } \" +\n        \"UNION { ?curated <http://rdfs.org/ns/void#sparqlEndpoint> ?endpointUrl . } \" +\n        \"UNION { ?curated <http://www.w3.org/ns/dcat#endpointURL> ?endpointUrl . }\" +\n        \"?metadata <http://purl.org/dc/terms/modified> ?date . \" +\n        \"?trace <http://www.w3.org/ns/earl#test> ?test . \" +\n        \"?trace <http://www.w3.org/ns/earl#result> ?result . \" +\n        \"?result <http://www.w3.org/ns/earl#outcome> <http://www.w3.org/ns/earl#passed> . \" +\n        \"FILTER(STRSTARTS(str(?test), ?category)) \" +\n        \"VALUES ?category { \" +\n        \"'https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/' \" +\n        \"'https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/extraction/asserted/' \" +\n        \"'https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/extraction/computed/' \" +\n        \"'https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/sportal/' \" +\n        \"'https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/sparqles/SPARQL10/' \" +\n        \"'https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/sparqles/SPARQL11/' \" +\n        \"}\" +\n        \"}  \" +\n        \"} GROUP BY ?g ?date ?category ?endpointUrl\";\n    return paginatedSparqlQueryPromise(testCategoryQuery)\n        .then(json => {\n            json.forEach((itemResult, i) => {\n                let category = itemResult.category.value;\n                let count = itemResult.count.value;\n                let endpoint = itemResult.endpointUrl.value;\n                let graph = itemResult.g.value.replace('http://ns.inria.fr/indegx#', '');\n                let date = Global.parseDate(itemResult.date.value, 'YYYY-MM-DDTHH:mm:ss');\n                testCategoryData.push({ category: category, graph: graph, date: date, endpoint: endpoint, count: count });\n            });\n        })\n        .then(() => {\n            try {\n                let content = JSON.stringify(testCategoryData);\n                fs.writeFileSync(categoryTestCountFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n            console.log(\"categoryTestCountFill END\")\n        })\n        .catch(error => {\n            console.log(error)\n            try {\n                let content = JSON.stringify([]);\n                fs.writeFileSync(categoryTestCountFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n        });\n}\n\nfunction totalCategoryTestCountFill() {\n    console.log(\"totalCategoryTestCountFill START\")\n    // Number of tests passed by test categories\n    let testCategoryQuery = \"SELECT DISTINCT ?category ?g ?date (count(DISTINCT ?test) AS ?count) ?endpointUrl { \" +\n        \"GRAPH ?g { ?metadata <http://ns.inria.fr/kg/index#curated> ?curated . \" +\n        \"?metadata <http://ns.inria.fr/kg/index#trace> ?trace . \" +\n        \"{ ?curated <http://www.w3.org/ns/sparql-service-description#endpoint> ?endpointUrl . } \" +\n        \"UNION { ?curated <http://rdfs.org/ns/void#sparqlEndpoint> ?endpointUrl . } \" +\n        \"UNION { ?curated <http://www.w3.org/ns/dcat#endpointURL> ?endpointUrl . }\" +\n        \"?metadata <http://purl.org/dc/terms/modified> ?date . \" +\n        \"?trace <http://www.w3.org/ns/earl#test> ?test . \" +\n        \"?trace <http://www.w3.org/ns/earl#result> ?result . \" +\n        \"?result <http://www.w3.org/ns/earl#outcome> <http://www.w3.org/ns/earl#passed> . \" +\n        \"FILTER(STRSTARTS(str(?test), str(?category))) \" +\n        \"VALUES ?category { \" +\n        \"<https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/> \" +\n        \"<https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/extraction/asserted/> \" +\n        \"<https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/extraction/computed/> \" +\n        \"<https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/sportal/> \" +\n        \"<https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/sparqles/SPARQL10/> \" +\n        \"<https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/sparqles/SPARQL11/> \" +\n        \"} \" +\n        \"} \" +\n        \"} \" +\n        \"GROUP BY ?g ?date ?category ?endpointUrl \" +\n        \"ORDER BY ?category \";\n    let totalTestCategoryData = [];\n    return paginatedSparqlQueryPromise(testCategoryQuery).then(json => {\n        json.forEach((itemResult, i) => {\n            let category = itemResult.category.value;\n            let count = itemResult.count.value;\n            let endpoint = itemResult.endpointUrl.value;\n            let graph = itemResult.g.value;\n            let date = Global.parseDate(itemResult.date.value, 'YYYY-MM-DDTHH:mm:ss');\n\n            totalTestCategoryData.push({ category: category, endpoint: endpoint, graph: graph, date: date, count: count })\n        });\n    })\n        .then(() => {\n            try {\n                let content = JSON.stringify(totalTestCategoryData);\n                fs.writeFileSync(totalCategoryTestCountFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n            console.log(\"totalCategoryTestCountFill END\")\n        })\n        .catch(error => {\n            console.log(error)\n            try {\n                let content = JSON.stringify([]);\n                fs.writeFileSync(totalCategoryTestCountFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n        });\n}\n\nfunction endpointTestsDataFill() {\n    console.log(\"endpointTestsDataFill START\")\n\n    let appliedTestQuery = \"SELECT DISTINCT ?endpointUrl ?g ?date ?rule { \" +\n        \"GRAPH ?g { \" +\n        \"?metadata <http://ns.inria.fr/kg/index#curated> ?curated . \" +\n        \"?metadata <http://purl.org/dc/terms/modified> ?date . \" +\n        \"?curated <http://www.w3.org/ns/prov#wasGeneratedBy> ?rule . \" +\n        \"{ ?curated <http://www.w3.org/ns/sparql-service-description#endpoint> ?endpointUrl . } \" +\n        \"UNION { ?curated <http://rdfs.org/ns/void#sparqlEndpoint> ?endpointUrl . } \" +\n        \"UNION { ?curated <http://www.w3.org/ns/dcat#endpointURL> ?endpointUrl . }\" +\n        \"} \" +\n        \"}\";\n    let endpointTestsData = [];\n    return paginatedSparqlQueryPromise(appliedTestQuery)\n        .then(json => {\n            json.forEach((item, i) => {\n                let endpointUrl = item.endpointUrl.value;\n                let rule = item.rule.value;\n                let graph = item.g.value;\n                let date = Global.parseDate(item.date.value, 'YYYY-MM-DDTHH:mm:ss');\n\n                endpointTestsData.push({ endpoint: endpointUrl, activity: rule, graph: graph, date: date })\n            });\n        })\n        .then(() => {\n            try {\n                let content = JSON.stringify(endpointTestsData);\n                fs.writeFileSync(endpointTestsDataFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n            console.log(\"endpointTestsDataFill END\")\n        })\n        .catch(error => {\n            console.log(error)\n            try {\n                let content = JSON.stringify([]);\n                fs.writeFileSync(endpointTestsDataFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n        });\n}\n\nfunction totalRuntimeDataFill() {\n    console.log(\"totalRuntimeDataFill START\")\n    let maxMinTimeQuery = \"SELECT DISTINCT ?g ?endpointUrl ?date (MIN(?startTime) AS ?start) (MAX(?endTime) AS ?end) { \" +\n        \" GRAPH ?g { \" +\n        \"?metadata <http://ns.inria.fr/kg/index#curated> ?curated . \" +\n        \"?metadata <http://ns.inria.fr/kg/index#trace> ?trace . \" +\n        \"?metadata <http://purl.org/dc/terms/modified> ?date . \" +\n        \"?trace <http://www.w3.org/ns/prov#startedAtTime> ?startTime . \" +\n        \"?trace <http://www.w3.org/ns/prov#endedAtTime> ?endTime . \" +\n        \"{ ?curated <http://www.w3.org/ns/sparql-service-description#endpoint> ?endpointUrl . } \" +\n        \"UNION { ?curated <http://www.w3.org/ns/dcat#endpointURL> ?endpointUrl . }\" +\n        \"UNION { ?curated <http://rdfs.org/ns/void#sparqlEndpoint> ?endpointUrl . } \" +\n        \"} \" +\n        \"} \";\n    let totalRuntimeData = []\n    return paginatedSparqlQueryPromise(maxMinTimeQuery).then(jsonResponse => {\n        jsonResponse.forEach((itemResult, i) => {\n            let graph = itemResult.g.value.replace('http://ns.inria.fr/indegx#', '');\n            let date = Global.parseDate(itemResult.date.value);\n            let start = Global.parseDate(itemResult.start.value);\n            let end = Global.parseDate(itemResult.end.value);\n            let endpointUrl = itemResult.endpointUrl.value;\n            let runtimeData = dayjs.duration(end.diff(start));\n            totalRuntimeData.push({ graph: graph, endpoint: endpointUrl, date: date, start: start, end: end, runtime: runtimeData })\n        });\n    })\n        .then(() => {\n            try {\n                let content = JSON.stringify(totalRuntimeData);\n                fs.writeFileSync(totalRuntimeDataFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n            console.log(\"totalRuntimeDataFill END\")\n        })\n        .catch(error => {\n            console.log(error)\n            try {\n                let content = JSON.stringify([]);\n                fs.writeFileSync(totalRuntimeDataFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n        });\n}\n\nfunction averageRuntimeDataFill() {\n    console.log(\"averageRuntimeDataFill START\")\n    let maxMinTimeQuery = \"SELECT DISTINCT ?g ?date (MIN(?startTime) AS ?start) (MAX(?endTime) AS ?end)\" +\n        \" { \" +\n        \"GRAPH ?g {\" +\n        \"?metadata <http://ns.inria.fr/kg/index#curated> ?data , ?endpoint . \" +\n        \"?metadata <http://ns.inria.fr/kg/index#trace> ?trace . \" +\n        \"?metadata <http://purl.org/dc/terms/modified> ?date . \" +\n        \"?trace <http://www.w3.org/ns/prov#startedAtTime> ?startTime . \" +\n        \"?trace <http://www.w3.org/ns/prov#endedAtTime> ?endTime . \" +\n        \"} \" +\n        \"}\";\n    let numberOfEndpointQuery = \"SELECT DISTINCT ?g (COUNT(?endpointUrl) AS ?count) { GRAPH ?g { ?metadata <http://ns.inria.fr/kg/index#curated> ?endpoint , ?dataset . { ?endpoint <http://www.w3.org/ns/sparql-service-description#endpoint> ?endpointUrl . } UNION { ?dataset <http://rdfs.org/ns/void#sparqlEndpoint> ?endpointUrl . } } }\";\n    let averageRuntimeData = [];\n    let graphStartEndMap = new Map();\n    return Promise.all([\n        paginatedSparqlQueryPromise(maxMinTimeQuery)\n            .then(jsonResponse => {\n                jsonResponse.forEach((itemResult, i) => {\n                    let graph = itemResult.g.value.replace('http://ns.inria.fr/indegx#', '');\n                    let date = Global.parseDate(itemResult.date.value, 'YYYY-MM-DDTHH:mm:ss');\n                    let start = Global.parseDate(itemResult.start.value, 'YYYY-MM-DDTHH:mm:ss');\n                    let end = Global.parseDate(itemResult.end.value, 'YYYY-MM-DDTHH:mm:ss');\n                    let runtime = dayjs.duration(end.diff(start));\n\n                    if (graphStartEndMap.get(graph) == undefined) {\n                        graphStartEndMap.set(graph, {});\n                    }\n                    graphStartEndMap.get(graph).start = start;\n                    graphStartEndMap.get(graph).end = end;\n                    graphStartEndMap.get(graph).runtime = runtime;\n                    graphStartEndMap.get(graph).graph = graph;\n                    graphStartEndMap.get(graph).date = date;\n                })\n            }),\n        paginatedSparqlQueryPromise(numberOfEndpointQuery)\n            .then(numberOfEndpointJson => {\n                numberOfEndpointJson.forEach((numberEndpointItem, i) => {\n                    let graph = numberEndpointItem.g.value;\n                    graph = graph.replace('http://ns.inria.fr/indegx#', '');\n                    let count = numberEndpointItem.count.value;\n                    if (graphStartEndMap.get(graph) == undefined) {\n                        graphStartEndMap.set(graph, {});\n                    }\n                    graphStartEndMap.get(graph).count = count\n                    averageRuntimeData.push(graphStartEndMap.get(graph))\n                });\n            })\n    ])\n        .then(() => {\n            try {\n                let content = JSON.stringify(averageRuntimeData);\n                fs.writeFileSync(averageRuntimeDataFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n            console.log(\"averageRuntimeDataFill END\")\n        })\n        .catch(error => {\n            console.log(error)\n            try {\n                let content = JSON.stringify([]);\n                fs.writeFileSync(averageRuntimeDataFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n        });\n}\n\n\nfunction classAndPropertiesDataFill() {\n    console.log(\"classAndPropertiesDataFill START\")\n    let classPartitionQuery = \"SELECT DISTINCT ?endpointUrl ?c ?ct ?cc ?cp ?cs ?co { \" +\n        \"GRAPH ?g {\" +\n        \"{ ?curated <http://www.w3.org/ns/sparql-service-description#endpoint> ?endpointUrl . } \" +\n        \"UNION { ?curated <http://rdfs.org/ns/void#sparqlEndpoint> ?endpointUrl . } \" +\n        \"UNION { ?curated <http://www.w3.org/ns/dcat#endpointURL> ?endpointUrl . }\" +\n        \"?metadata <http://ns.inria.fr/kg/index#curated> ?curated . \" +\n        \"?base <http://rdfs.org/ns/void#classPartition> ?classPartition . \" +\n        \"?classPartition <http://rdfs.org/ns/void#class> ?c . \" +\n        \"OPTIONAL { \" +\n        \"?classPartition <http://rdfs.org/ns/void#triples> ?ct . \" +\n        \"} \" +\n        \"OPTIONAL { \" +\n        \"?classPartition <http://rdfs.org/ns/void#classes> ?cc . \" +\n        \"} \" +\n        \"OPTIONAL { \" +\n        \"?classPartition <http://rdfs.org/ns/void#properties> ?cp . \" +\n        \"} \" +\n        \"OPTIONAL { \" +\n        \"?classPartition <http://rdfs.org/ns/void#distinctSubjects> ?cs . \" +\n        \"} \" +\n        \"OPTIONAL { \" +\n        \"?classPartition <http://rdfs.org/ns/void#distinctObjects> ?co . \" +\n        \"} \" +\n        \"FILTER(! isBlank(?c)) \" +\n        \"}\" +\n        \"} GROUP BY ?endpointUrl ?c ?ct ?cc ?cp ?cs ?co \";\n    let classSet = new Set();\n    let classCountsEndpointsMap = new Map();\n    let classPropertyCountsEndpointsMap = new Map();\n    let classContentData = [];\n    return paginatedSparqlQueryPromise(classPartitionQuery)\n        .then(json => {\n            json.forEach((item, i) => {\n                let c = item.c.value;\n                classSet.add(c);\n                let endpointUrl = item.endpointUrl.value;\n                if (classCountsEndpointsMap.get(c) == undefined) {\n                    classCountsEndpointsMap.set(c, { class: c });\n                }\n                if (item.ct != undefined) {\n                    let ct = Number.parseInt(item.ct.value);\n                    let currentClassItem = classCountsEndpointsMap.get(c);\n                    if (classCountsEndpointsMap.get(c).triples == undefined) {\n                        currentClassItem.triples = 0;\n                        classCountsEndpointsMap.set(c, currentClassItem);\n                    }\n                    currentClassItem.triples = currentClassItem.triples + ct;\n                    classCountsEndpointsMap.set(c, currentClassItem);\n                }\n                if (item.cc != undefined) {\n                    let cc = Number.parseInt(item.cc.value);\n                    let currentClassItem = classCountsEndpointsMap.get(c);\n                    if (classCountsEndpointsMap.get(c).classes == undefined) {\n                        currentClassItem.classes = 0;\n                        classCountsEndpointsMap.set(c, currentClassItem);\n                    }\n                    currentClassItem.classes = currentClassItem.classes + cc;\n                    classCountsEndpointsMap.set(c, currentClassItem);\n                }\n                if (item.cp != undefined) {\n                    let cp = Number.parseInt(item.cp.value);\n                    let currentClassItem = classCountsEndpointsMap.get(c);\n                    if (classCountsEndpointsMap.get(c).properties == undefined) {\n                        currentClassItem.properties = 0;\n                        classCountsEndpointsMap.set(c, currentClassItem);\n                    }\n                    currentClassItem.properties = currentClassItem.properties + cp;\n                    classCountsEndpointsMap.set(c, currentClassItem);\n                }\n                if (item.cs != undefined) {\n                    let cs = Number.parseInt(item.cs.value);\n                    let currentClassItem = classCountsEndpointsMap.get(c);\n                    if (classCountsEndpointsMap.get(c).distinctSubjects == undefined) {\n                        currentClassItem.distinctSubjects = 0;\n                        classCountsEndpointsMap.set(c, currentClassItem);\n                    }\n                    currentClassItem.distinctSubjects = currentClassItem.distinctSubjects + cs;\n                    classCountsEndpointsMap.set(c, currentClassItem);\n                }\n                if (item.co != undefined) {\n                    let co = Number.parseInt(item.co.value);\n                    let currentClassItem = classCountsEndpointsMap.get(c);\n                    if (classCountsEndpointsMap.get(c).distinctObjects == undefined) {\n                        currentClassItem.distinctObjects = 0;\n                        classCountsEndpointsMap.set(c, currentClassItem);\n                    }\n                    currentClassItem.distinctObjects = currentClassItem.distinctObjects + co;\n                    classCountsEndpointsMap.set(c, currentClassItem);\n                }\n                if (classCountsEndpointsMap.get(c).endpoints == undefined) {\n                    let currentClassItem = classCountsEndpointsMap.get(c);\n                    currentClassItem.endpoints = new Set();\n                    classCountsEndpointsMap.set(c, currentClassItem);\n                }\n                classCountsEndpointsMap.get(c).endpoints.add(endpointUrl);\n            });\n        })\n        .then(() => {\n            let classPropertyPartitionQuery = \"SELECT DISTINCT ?endpointUrl ?c ?p ?pt ?po ?ps { \" +\n                \"GRAPH ?g {\" +\n                \"?endpoint <http://www.w3.org/ns/sparql-service-description#endpoint> ?endpointUrl . \" +\n                \"?metadata <http://ns.inria.fr/kg/index#curated> ?endpoint , ?base . \" +\n                \"?base <http://rdfs.org/ns/void#classPartition> ?classPartition . \" +\n                \"?classPartition <http://rdfs.org/ns/void#class> ?c . \" +\n                \"?classPartition <http://rdfs.org/ns/void#propertyPartition> ?classPropertyPartition . \" +\n                \"?classPropertyPartition <http://rdfs.org/ns/void#property> ?p . \" +\n                \"OPTIONAL { \" +\n                \"?classPropertyPartition <http://rdfs.org/ns/void#triples> ?pt . \" +\n                \"} \" +\n                \"OPTIONAL { \" +\n                \"?classPropertyPartition <http://rdfs.org/ns/void#distinctSubjects> ?ps . \" +\n                \"} \" +\n                \"OPTIONAL { \" +\n                \"?classPropertyPartition <http://rdfs.org/ns/void#distinctObjects> ?po . \" +\n                \"} \" +\n                \"FILTER(! isBlank(?c)) \" +\n                \"}\" +\n                \"} GROUP BY ?endpointUrl ?c ?p ?pt ?po ?ps \";\n            return paginatedSparqlQueryPromise(classPropertyPartitionQuery).then(json => {\n                json.forEach((item, i) => {\n                    let c = item.c.value;\n                    let p = item.p.value;\n                    let endpointUrl = item.endpointUrl.value;\n\n                    classSet.add(c);\n\n                    if (classPropertyCountsEndpointsMap.get(c) == undefined) {\n                        classPropertyCountsEndpointsMap.set(c, new Map());\n                    }\n                    if (classPropertyCountsEndpointsMap.get(c).get(p) == undefined) {\n                        classPropertyCountsEndpointsMap.get(c).set(p, { property: p });\n                    }\n                    if (item.pt != undefined) {\n                        let pt = Number.parseInt(item.pt.value);\n                        if (classPropertyCountsEndpointsMap.get(c).get(p).triples == undefined) {\n                            classPropertyCountsEndpointsMap.get(c).get(p).triples = 0;\n                        }\n                        classPropertyCountsEndpointsMap.get(c).get(p).triples = classPropertyCountsEndpointsMap.get(c).get(p).triples + pt;\n                    }\n                    if (item.ps != undefined) {\n                        let ps = Number.parseInt(item.ps.value);\n                        if (classPropertyCountsEndpointsMap.get(c).get(p).distinctSubjects == undefined) {\n                            classPropertyCountsEndpointsMap.get(c).get(p).distinctSubjects = 0;\n                        }\n                        classPropertyCountsEndpointsMap.get(c).get(p).distinctSubjects = classPropertyCountsEndpointsMap.get(c).get(p).distinctSubjects + ps;\n                    }\n                    if (item.po != undefined) {\n                        let po = Number.parseInt(item.po.value);\n                        if (classPropertyCountsEndpointsMap.get(c).get(p).distinctObjects == undefined) {\n                            classPropertyCountsEndpointsMap.get(c).get(p).distinctObjects = 0;\n                        }\n                        classPropertyCountsEndpointsMap.get(c).get(p).distinctObjects = classPropertyCountsEndpointsMap.get(c).get(p).distinctObjects + po;\n                    }\n                    if (classPropertyCountsEndpointsMap.get(c).get(p).endpoints == undefined) {\n                        classPropertyCountsEndpointsMap.get(c).get(p).endpoints = new Set();\n                    }\n                    classPropertyCountsEndpointsMap.get(c).get(p).endpoints.add(endpointUrl);\n                });\n\n            });\n        })\n        .then(() => {\n            classSet.forEach(className => {\n                let classCountItem = classCountsEndpointsMap.get(className);\n                let classItem = classCountItem;\n                if (classCountItem == undefined) {\n                    classItem = { class: className };\n                }\n                if (classItem.endpoints != undefined) {\n                    classItem.endpoints = [...classItem.endpoints]\n                }\n                let classPropertyItem = classPropertyCountsEndpointsMap.get(className);\n                if (classPropertyItem != undefined) {\n                    classItem.propertyPartitions = [];\n                    classPropertyItem.forEach((propertyPartitionItem, propertyName, map1) => {\n                        propertyPartitionItem.endpoints = [...propertyPartitionItem.endpoints]\n                        classItem.propertyPartitions.push(propertyPartitionItem);\n                    });\n                }\n                classContentData.push(classItem)\n            })\n            try {\n                let content = JSON.stringify(classContentData);\n                fs.writeFileSync(classPropertyDataFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n            console.log(\"classAndPropertiesDataFill END\")\n        })\n        .catch(error => {\n            console.log(error)\n            try {\n                let content = JSON.stringify([]);\n                fs.writeFileSync(classPropertyDataFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n        })\n}\n\nfunction datasetDescriptionDataFill() {\n    console.log(\"datasetDescriptionDataDataFill START\")\n    let provenanceWhoCheckQuery = \"SELECT DISTINCT ?endpointUrl ?o { \" +\n        \"GRAPH ?g { \" +\n        \"?metadata <http://ns.inria.fr/kg/index#curated> ?dataset . \" +\n        \"{ ?dataset <http://www.w3.org/ns/sparql-service-description#endpoint> ?endpointUrl . } \" +\n        \"UNION { ?dataset <http://www.w3.org/ns/dcat#endpointURL> ?endpointUrl } \" +\n        \"UNION { ?dataset <http://rdfs.org/ns/void#sparqlEndpoint> ?endpointUrl }\" +\n        \"OPTIONAL {\" +\n        \"{ ?dataset <http://purl.org/dc/terms/creator> ?o } \" +\n        \"UNION { ?dataset <http://purl.org/dc/terms/contributor> ?o } \" +\n        \"UNION { ?dataset <http://purl.org/dc/terms/publisher> ?o } \" +\n        \"} \" +\n        \"} \" +\n        \"} \";\n    let provenanceLicenseCheckQuery = \"SELECT DISTINCT ?endpointUrl ?o { \" +\n        \"GRAPH ?g { \" +\n        \"?metadata <http://ns.inria.fr/kg/index#curated> ?dataset . \" +\n        \"{ ?dataset <http://www.w3.org/ns/sparql-service-description#endpoint> ?endpointUrl . } \" +\n        \"UNION { ?dataset <http://www.w3.org/ns/dcat#endpointURL> ?endpointUrl } \" +\n        \"UNION { ?dataset <http://rdfs.org/ns/void#sparqlEndpoint> ?endpointUrl }\" +\n        \"OPTIONAL {\" +\n        \"{ ?dataset <http://purl.org/dc/terms/license> ?o } \" +\n        \"UNION {?dataset <http://purl.org/dc/terms/conformsTo> ?o } \" +\n        \"} \" +\n        \"} \" +\n        \"} \";\n    let provenanceDateCheckQuery = \"SELECT DISTINCT ?endpointUrl ?o { \" +\n        \"GRAPH ?g { \" +\n        \"?metadata <http://ns.inria.fr/kg/index#curated> ?dataset . \" +\n        \"{ ?dataset <http://www.w3.org/ns/sparql-service-description#endpoint> ?endpointUrl . } \" +\n        \"UNION { ?dataset <http://www.w3.org/ns/dcat#endpointURL> ?endpointUrl } \" +\n        \"UNION { ?dataset <http://rdfs.org/ns/void#sparqlEndpoint> ?endpointUrl }\" +\n        \"OPTIONAL {\" +\n        \" { ?dataset <http://purl.org/dc/terms/modified> ?o } \" +\n        \"UNION { ?dataset <http://www.w3.org/ns/prov#wasGeneratedAtTime> ?o } \" +\n        \"UNION { ?dataset <http://purl.org/dc/terms/issued> ?o } \" +\n        \"} \" +\n        \"} \" +\n        \"} \";\n    let provenanceSourceCheckQuery = \"SELECT DISTINCT ?endpointUrl ?o { \" +\n        \"GRAPH ?g { \" +\n        \"?metadata <http://ns.inria.fr/kg/index#curated> ?dataset . \" +\n        \"{ ?dataset <http://www.w3.org/ns/sparql-service-description#endpoint> ?endpointUrl . } \" +\n        \"UNION { ?dataset <http://www.w3.org/ns/dcat#endpointURL> ?endpointUrl } \" +\n        \"UNION { ?dataset <http://rdfs.org/ns/void#sparqlEndpoint> ?endpointUrl }\" +\n        \"OPTIONAL {\" +\n        \"{ ?dataset <http://purl.org/dc/terms/source> ?o } \" +\n        \"UNION { ?dataset <http://www.w3.org/ns/prov#wasDerivedFrom> ?o } \" +\n        \"UNION { ?dataset <http://purl.org/dc/terms/format> ?o } \" +\n        \"} \" +\n        \"} \" +\n        \"} \";\n    let endpointDescriptionElementMap = new Map();\n\n    let datasetDescriptionData = [];\n    return Promise.all([\n        paginatedSparqlQueryPromise(provenanceWhoCheckQuery)\n            .then(json => {\n                json.forEach((item, i) => {\n                    let endpointUrl = item.endpointUrl.value;\n                    let who = (item.o != undefined);\n                    let currentEndpointItem = endpointDescriptionElementMap.get(endpointUrl)\n                    if (currentEndpointItem == undefined) {\n                        endpointDescriptionElementMap.set(endpointUrl, { endpoint: endpointUrl })\n                        currentEndpointItem = endpointDescriptionElementMap.get(endpointUrl);\n                    }\n                    currentEndpointItem.who = who;\n                    if (who) {\n                        currentEndpointItem.whoValue = item.o.value;\n                    }\n                    endpointDescriptionElementMap.set(endpointUrl, currentEndpointItem);\n                })\n            }),\n        paginatedSparqlQueryPromise(provenanceLicenseCheckQuery)\n            .then(json => {\n                json.forEach((item, i) => {\n                    let endpointUrl = item.endpointUrl.value;\n                    let license = (item.o != undefined);\n                    let currentEndpointItem = endpointDescriptionElementMap.get(endpointUrl)\n                    if (currentEndpointItem == undefined) {\n                        endpointDescriptionElementMap.set(endpointUrl, { endpoint: endpointUrl })\n                        currentEndpointItem = endpointDescriptionElementMap.get(endpointUrl);\n                    }\n                    currentEndpointItem.license = license;\n                    if (license) {\n                        currentEndpointItem.licenseValue = item.o.value;\n                    }\n                    endpointDescriptionElementMap.set(endpointUrl, currentEndpointItem);\n                })\n            })\n            .catch(error => {\n                console.log(error)\n            })\n        ,\n        paginatedSparqlQueryPromise(provenanceDateCheckQuery)\n            .then(json => {\n                json.forEach((item, i) => {\n                    let endpointUrl = item.endpointUrl.value;\n                    let time = (item.o != undefined);\n                    let currentEndpointItem = endpointDescriptionElementMap.get(endpointUrl)\n                    if (currentEndpointItem == undefined) {\n                        endpointDescriptionElementMap.set(endpointUrl, { endpoint: endpointUrl })\n                        currentEndpointItem = endpointDescriptionElementMap.get(endpointUrl);\n                    }\n                    currentEndpointItem.time = time;\n                    if (time) {\n                        currentEndpointItem.timeValue = item.o.value;\n                    }\n                    endpointDescriptionElementMap.set(endpointUrl, currentEndpointItem);\n                })\n            })\n            .catch(error => {\n                console.log(error)\n            })\n        ,\n        paginatedSparqlQueryPromise(provenanceSourceCheckQuery)\n            .then(json => {\n                json.forEach((item, i) => {\n                    let endpointUrl = item.endpointUrl.value;\n                    let source = (item.o != undefined);\n                    let currentEndpointItem = endpointDescriptionElementMap.get(endpointUrl)\n                    if (currentEndpointItem == undefined) {\n                        endpointDescriptionElementMap.set(endpointUrl, { endpoint: endpointUrl })\n                        currentEndpointItem = endpointDescriptionElementMap.get(endpointUrl);\n                    }\n                    currentEndpointItem.source = source;\n                    if (source) {\n                        currentEndpointItem.sourceValue = item.o.value;\n                    }\n                    endpointDescriptionElementMap.set(endpointUrl, currentEndpointItem);\n                });\n                endpointDescriptionElementMap.forEach((prov, endpoint, map) => {\n                    datasetDescriptionData.push(prov)\n                });\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    ])\n        .finally(() => {\n            try {\n                let content = JSON.stringify(datasetDescriptionData);\n                fs.writeFileSync(datasetDescriptionDataFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n            console.log(\"datasetDescriptionDataDataFill END\")\n        })\n        .catch(error => {\n            console.log(error)\n            try {\n                let content = JSON.stringify([]);\n                fs.writeFileSync(datasetDescriptionDataFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n        });\n}\n\nfunction shortUrisDataFill() {\n    console.log(\"shortUrisDataFill START\")\n    let shortUrisMeasureQuery = \"SELECT DISTINCT ?g ?date ?endpointUrl ?measure { \" +\n        \"GRAPH ?g {\" +\n        \"{ ?curated <http://www.w3.org/ns/sparql-service-description#endpoint> ?endpointUrl . } \" +\n        \"UNION { ?curated <http://rdfs.org/ns/void#sparqlEndpoint> ?endpointUrl . } \" +\n        \"?metadata <http://purl.org/dc/terms/modified> ?date . \" +\n        \"?metadata <http://ns.inria.fr/kg/index#curated> ?curated . \" +\n        \"?metadata <http://www.w3.org/ns/dqv#hasQualityMeasurement> ?measureNode . \" +\n        \"?measureNode <http://www.w3.org/ns/dqv#isMeasurementOf> <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/shortUris.ttl> . \" +\n        \"?measureNode <http://www.w3.org/ns/dqv#value> ?measure . \" +\n        \"}\" +\n        \" } GROUP BY ?g ?date ?endpointUrl ?measure \";\n    let shortUriData = []\n    return paginatedSparqlQueryPromise(shortUrisMeasureQuery)\n        .then(json => {\n            let graphSet = new Set();\n            json.forEach((jsonItem, i) => {\n                let endpoint = jsonItem.endpointUrl.value;\n                let shortUriMeasure = Number.parseFloat(jsonItem.measure.value) * 100;\n                let graph = jsonItem.g.value.replace(\"http://ns.inria.fr/indegx#\", \"\");\n                let date = Global.parseDate(jsonItem.date.value, 'YYYY-MM-DDTHH:mm:ss');\n\n                graphSet.add(graph);\n                shortUriData.push({ graph: graph, date: date, endpoint: endpoint, measure: shortUriMeasure })\n            });\n        })\n        .then(() => {\n            try {\n                let content = JSON.stringify(shortUriData);\n                fs.writeFileSync(shortUriDataFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n            console.log(\"shortUrisDataFill END\")\n        })\n        .catch(error => {\n            console.log(error)\n            try {\n                let content = JSON.stringify([]);\n                fs.writeFileSync(shortUriDataFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n        });\n}\n\nfunction readableLabelsDataFill() {\n    console.log(\"readableLabelsDataFill START\")\n    let readableLabelsQuery = \"SELECT DISTINCT ?g ?date ?endpointUrl ?measure { \" +\n        \"GRAPH ?g {\" +\n        \"{ ?curated <http://www.w3.org/ns/sparql-service-description#endpoint> ?endpointUrl . } \" +\n        \"UNION { ?curated <http://rdfs.org/ns/void#sparqlEndpoint> ?endpointUrl . } \" +\n        \"?metadata <http://purl.org/dc/terms/modified> ?date . \" +\n        \"?metadata <http://ns.inria.fr/kg/index#curated> ?curated . \" +\n        \"?metadata <http://www.w3.org/ns/dqv#hasQualityMeasurement> ?measureNode . \" +\n        \"?measureNode <http://www.w3.org/ns/dqv#isMeasurementOf> <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/readableLabels.ttl> . \" +\n        \"?measureNode <http://www.w3.org/ns/dqv#value> ?measure . \" +\n        \"} \" +\n        \" } GROUP BY ?g ?date ?endpointUrl ?measure \";\n\n    let readableLabelData = [];\n    return paginatedSparqlQueryPromise(readableLabelsQuery)\n        .then(json => {\n            json.forEach((jsonItem, i) => {\n                let endpoint = jsonItem.endpointUrl.value;\n                let readableLabelMeasure = Number.parseFloat(jsonItem.measure.value) * 100;\n                let graph = jsonItem.g.value.replace(\"http://ns.inria.fr/indegx#\", \"\");\n                let date = Global.parseDate(jsonItem.date.value, 'YYYY-MM-DDTHH:mm:ss');\n\n                readableLabelData.push({ graph: graph, date: date, endpoint: endpoint, measure: readableLabelMeasure })\n            });\n\n        })\n        .then(() => {\n            try {\n                let content = JSON.stringify(readableLabelData);\n                fs.writeFileSync(readableLabelDataFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n            console.log(\"readableLabelsDataFill END\")\n        })\n        .catch(error => {\n            console.log(error)\n            try {\n                let content = JSON.stringify([]);\n                fs.writeFileSync(readableLabelDataFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n        });\n}\n\nfunction rdfDataStructureDataFill() {\n    console.log(\"rdfDataStructureDataFill START\")\n    let rdfDataStructureQuery = \"SELECT DISTINCT ?g ?date ?endpointUrl ?measure { \" +\n        \"GRAPH ?g {\" +\n        \"{ ?curated <http://www.w3.org/ns/sparql-service-description#endpoint> ?endpointUrl . } \" +\n        \"UNION { ?curated <http://rdfs.org/ns/void#sparqlEndpoint> ?endpointUrl . } \" +\n        \"?metadata <http://purl.org/dc/terms/modified> ?date . \" +\n        \"?metadata <http://ns.inria.fr/kg/index#curated> ?curated . \" +\n        \"?metadata <http://www.w3.org/ns/dqv#hasQualityMeasurement> ?measureNode . \" +\n        \"?measureNode <http://www.w3.org/ns/dqv#isMeasurementOf> <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/RDFDataStructures.ttl> . \" +\n        \"?measureNode <http://www.w3.org/ns/dqv#value> ?measure . \" +\n        \"}\" +\n        \" } GROUP BY ?g ?date ?endpointUrl ?measure \";\n\n    let rdfDataStructureData = []\n    paginatedSparqlQueryPromise(rdfDataStructureQuery).then(json => {\n        json.forEach((jsonItem, i) => {\n            let endpoint = jsonItem.endpointUrl.value;\n            let rdfDataStructureMeasure = Number.parseFloat(jsonItem.measure.value) * 100;\n            let graph = jsonItem.g.value.replace(\"http://ns.inria.fr/indegx#\", \"\");\n            let date = Global.parseDate(jsonItem.date.value, 'YYYY-MM-DDTHH:mm:ss');\n\n            rdfDataStructureData.push({ graph: graph, date: date, endpoint: endpoint, measure: rdfDataStructureMeasure })\n        });\n    })\n        .then(() => {\n            try {\n                let content = JSON.stringify(rdfDataStructureData);\n                fs.writeFileSync(rdfDataStructureDataFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n            console.log(\"rdfDataStructureDataFill END\")\n        })\n        .catch(error => {\n            console.log(error)\n            try {\n                let content = JSON.stringify([]);\n                fs.writeFileSync(rdfDataStructureDataFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n        });\n}\n\nfunction blankNodeDataFill() {\n    console.log(\"blankNodeDataFill START\")\n    let blankNodeQuery = \"SELECT DISTINCT ?g ?date ?endpointUrl ?measure { \" +\n        \"GRAPH ?g {\" +\n        \"?metadata <http://purl.org/dc/terms/modified> ?date . \" +\n        \"{ ?curated <http://www.w3.org/ns/sparql-service-description#endpoint> ?endpointUrl . } \" +\n        \"UNION { ?curated <http://rdfs.org/ns/void#sparqlEndpoint> ?endpointUrl . } \" +\n        \"?metadata <http://ns.inria.fr/kg/index#curated> ?curated . \" +\n        \"?metadata <http://www.w3.org/ns/dqv#hasQualityMeasurement> ?measureNode . \" +\n        \"?measureNode <http://www.w3.org/ns/dqv#isMeasurementOf> <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/blankNodeUsage.ttl> . \" +\n        \"?measureNode <http://www.w3.org/ns/dqv#value> ?measure . \" +\n        \"}\" +\n        \" } \" +\n        \"GROUP BY ?g ?date ?endpointUrl ?measure \";\n\n    let blankNodeData = []\n    return sparqlQueryPromise(blankNodeQuery).then(json => {\n        let graphSet = new Set();\n        json.results.bindings.forEach((jsonItem, i) => {\n            let endpoint = jsonItem.endpointUrl.value;\n            let blankNodeMeasure = Number.parseFloat(jsonItem.measure.value) * 100;\n            let graph = jsonItem.g.value.replace(\"http://ns.inria.fr/indegx#\", \"\");\n            let date = Global.parseDate(jsonItem.date.value, 'YYYY-MM-DDTHH:mm:ss');\n\n            graphSet.add(graph);\n            blankNodeData.push({ graph: graph, date: date, endpoint: endpoint, measure: blankNodeMeasure })\n        });\n    })\n        .then(() => {\n            try {\n                let content = JSON.stringify(blankNodeData);\n                fs.writeFileSync(blankNodesDataFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n            console.log(\"blankNodeDataFill END\")\n        })\n        .catch(error => {\n            console.log(error)\n            try {\n                let content = JSON.stringify([]);\n                fs.writeFileSync(blankNodesDataFilename, content)\n            } catch (err) {\n                console.error(err)\n            }\n        });\n}\n\nPromise.allSettled([\n    whiteListFill(),\n    endpointMapfill(),\n    SPARQLCoverageFill(),\n    vocabFill(),\n    tripleDataFill(),\n    classDataFill(),\n    propertyDataFill(),\n    categoryTestCountFill(),\n    totalCategoryTestCountFill(),\n    endpointTestsDataFill(),\n    totalRuntimeDataFill(),\n    averageRuntimeDataFill(),\n    classAndPropertiesDataFill(),\n    datasetDescriptionDataFill(),\n    shortUrisDataFill(),\n    rdfDataStructureDataFill(),\n    readableLabelsDataFill(),\n    blankNodeDataFill()\n])\n    .catch(error => {\n        console.log(error)\n    });","import fetch, { FetchError, RequestInit, Headers } from 'node-fetch';\nimport * as fs from 'node:fs/promises';\nimport { setTimeout } from 'node:timers/promises';\nimport dayjs from \"dayjs\";\nimport * as Logger from \"./LogUtils\"\n\nexport let nbFetchRetries = 10;\nexport let millisecondsBetweenRetries = 5000;\nlet countConcurrentQueries = 0;\nexport let maxConccurentQueries = 300;\nexport let delayMillisecondsTimeForConccurentQuery = 1000\n\n// Parse the date in any format\nexport function parseDate(input: string, format: string = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\") {\n    return dayjs(input, format);\n}\n\nexport function getCountConccurentQueries() {\n    return countConcurrentQueries;\n}\n\nexport function setNbFetchRetries(nb: number) {\n    if (nb !== undefined && nb !== null && nb >= 0) {\n        nbFetchRetries = nb;\n    } else {\n        throw new Error(\"The number of retries must be a positive integer\");\n    }\n}\n\nexport function setMillisecondsBetweenRetries(milliseconds: number) {\n    if (milliseconds !== undefined && milliseconds !== null && milliseconds >= 0) {\n        millisecondsBetweenRetries = milliseconds;\n    } else {\n        throw new Error(\"The number of milliseconds between retries must be a positive integer\");\n    }\n}\n\nexport function setMaxConccurentQueries(max: number) {\n    if (max !== undefined && max !== null && max >= 0) {\n        maxConccurentQueries = max;\n    } else {\n        throw new Error(\"The number of maximum concurrent queries must be a positive integer\");\n    }\n}\n\nexport function setDelayMillisecondsTimeForConccurentQuery(milliseconds: number) {\n    if (milliseconds !== undefined && milliseconds !== null && milliseconds >= 0) {\n        delayMillisecondsTimeForConccurentQuery = milliseconds;\n    } else {\n        throw new Error(\"The number of milliseconds between queries must be a positive integer\");\n    }\n}\n\nexport function appendToFile(filename, content) {\n    fs.writeFile(filename, content, { flag: 'a+' }).catch(error => {\n        Logger.error(\"Error appending to file\", error)\n    });\n}\n\nexport function writeFile(filename, content) {\n    fs.writeFile(filename, content).catch(error => {\n        Logger.error(\"Error writing to file\", filename, error)\n    });\n}\n\nexport function readFile(filename: string): Promise<string> {\n    let readFilePromise: Promise<string>;\n    if (filename.startsWith(\"http://\") || filename.startsWith(\"https://\")) {\n        readFilePromise = fetchGETPromise(filename)\n    } else if (filename.startsWith(\"file://\")) {\n        readFilePromise = fs.readFile(filename.replace(\"file://\", \"\")).then(buffer => buffer.toString())\n    } else {\n        readFilePromise = fs.readFile(filename).then(buffer => buffer.toString())\n    }\n    return readFilePromise;\n}\n\ntype promiseCreationFunction = {\n    (...args: any[]): Promise<any>;\n}\n\n/**\n * Execute promises iteratively, on the opposite to Promise.all, which execute promises in parallel.\n * @param args Array of the arguments to pass to the promiseCreationFunction. Each element of the array is an array of arguments to pass to the promiseCreationFunction.\n * @param promiseCreationFunction A function generating a promise from the elements in the args arrays.\n * @returns a promise resolved when all the promises created by the promiseCreationFunction are resolved.\n */\nexport function iterativePromises(args: Array<Array<any>>, promiseCreationFunction: promiseCreationFunction): Promise<any> {\n    let argsCopy = args.map(arg => arg);\n    if (argsCopy.length > 0) {\n        return promiseCreationFunction.apply(this, argsCopy[0]).then(() => {\n            argsCopy.shift();\n            return iterativePromises(argsCopy, promiseCreationFunction);\n        })\n    }\n    return new Promise<void>((resolve, reject) => resolve());\n}\n\nexport function fetchPromise(url, header = new Map(), method = \"GET\", query = \"\", numTry = 0) {\n    let myHeaders = new Headers();\n    myHeaders.set('pragma', 'no-cache');\n    myHeaders.set('cache-control', 'no-cache');\n    header.forEach((value, key) => {\n        myHeaders.set(key, value);\n    });\n    let myInit: RequestInit = {\n        method: method,\n        headers: myHeaders,\n        redirect: 'follow',\n    };\n    if (method.localeCompare(\"POST\") == 0) {\n        myInit.body = query;\n    }\n    if (countConcurrentQueries >= maxConccurentQueries) {\n        return setTimeout(delayMillisecondsTimeForConccurentQuery).then(() => fetchPromise(url, header, method, query, numTry))\n    } else {\n        countConcurrentQueries++;\n        return fetch(url, myInit)\n            .then(response => {\n                if (response.ok) {\n                    return response.blob().then(blob => blob.text())\n                } else {\n                    throw response;\n                }\n            }).catch(error => {\n                if (error instanceof FetchError) {\n                    Logger.error(error.type, error.message)\n                    Logger.info(\"Try:\", numTry, \"Fetch \", method, url, query);\n                    if (numTry < nbFetchRetries) {\n                        return setTimeout(millisecondsBetweenRetries).then(fetchPromise(url, header, method, query, numTry + 1));\n                    } else {\n                        Logger.error(\"Too many retries\", error);\n                    }\n                } else {\n                    Logger.error(\"Too many retries\", error);\n                }\n            }).finally(() => {\n                countConcurrentQueries--;\n                return;\n            });\n\n    }\n}\n\nexport function fetchGETPromise(url, header = new Map()) {\n    return fetchPromise(url, header);\n}\n\nexport function fetchPOSTPromise(url, query = \"\", header = new Map()) {\n    return fetchPromise(url, header, \"POST\", query);\n}\n\nexport function fetchJSONPromise(url, otherHeaders = new Map()) {\n    let header = new Map();\n    header.set('Content-Type', 'application/json');\n    otherHeaders.forEach((value, key) => {\n        header.set(key, value)\n    })\n    return fetchPromise(url, header).then(response => {\n        if(response == null || response == undefined || response == \"\") {\n            return {};\n        } else {\n            try {\n                return JSON.parse(response);\n            } catch (error) {\n                Logger.error(url, error, response)\n                throw error\n            }\n        }\n    });\n}\n\n/**\n * Taken from https://stackoverflow.com/questions/17267329/converting-unicode-character-to-string-format\n * @param text \n * @returns a string with unicode codes replaced by characters\n */\nexport function unicodeToUrlendcode(text) {\n    return text.replace(/\\\\u[\\dA-F]{4}/gi,\n        function (match) {\n            let unicodeMatch = String.fromCharCode(parseInt(match.replace(/\\\\u/g, ''), 16));\n            let urlEncodedMatch = encodeURIComponent(unicodeMatch);\n            return urlEncodedMatch;\n        });\n}","import dayjs from \"dayjs\"\nimport * as util from \"node:util\"\nimport { appendToFile, writeFile } from \"./GlobalUtils\";\n\nlet logFileName = \"kartographicaching.log\"\n\nexport function setLogFileName(fileName: string) {\n    if(fileName == null || fileName == undefined || fileName == \"\") {\n        logFileName = \"kartographicaching.log\";\n    } else {\n        logFileName = fileName;\n    }\n}\n\nexport function log(logObject: any, ...o: any[]) : void {\n    logging(\"LOG\", logObject, ...o);\n}\n\nexport function error(logObject: any, ...o: any[]) : void {\n    logging(\"ERROR\", logObject, ...o);\n}\n\nexport function info(logObject: any, ...o: any[]) : void {\n    logging(\"INFO\", logObject, ...o);\n}\n\nfunction logging(level, logObject: any, ...o: any[]): void {\n    const now = dayjs();\n    const message = util.format(\"[%s][%s]: %s\", level, now.toISOString(), logObject, ...o);\n    console.error(message);\n    appendToFile(logFileName, message + \"\\n\");\n}"],"names":[],"version":3,"file":"dataCaching.js.map"}