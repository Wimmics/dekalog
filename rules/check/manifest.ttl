@prefix mf: <http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#> .
@prefix kgi: <http://ns.inria.fr/kg/index#> .

<> a mf:Manifest ;
    mf:entries (
            <reachability.ttl>
            <provenance.ttl>
            <basicFederatedQuery.ttl>
        ) .

<basicFederatedQuery.ttl> a mf:ManifestEntry ;
    kgi:onSuccess (
        [
            mf:action """PREFIX sd: <http://www.w3.org/ns/sparql-service-description#>
                PREFIX prov: <http://www.w3.org/ns/prov#>
                INSERT DATA {
                    $endpointDescription sd:endpoint $rawEndpointUrl ;
                        sd:feature sd:basicFederatedQuery ;
                        prov:wasGeneratedBy <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/basicFederatedQuery.ttl#activity> .
                <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/basicFederatedQuery.ttl#activity> a prov:Activity ;
                    prov:used <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/basicFederatedQuery.ttl> .
                }
            """
        ]
        <../meta/modifiedUpdate.ttl>
    ) .

<reachability.ttl> a mf:ManifestEntry ;
    kgi:onSuccess (
        [ mf:action """PREFIX void: <http://rdfs.org/ns/void#>
            PREFIX dcat: <http://www.w3.org/ns/dcat#>
            PREFIX prov: <http://www.w3.org/ns/prov#>
            PREFIX sd: <http://www.w3.org/ns/sparql-service-description#>
            PREFIX earl: <http://www.w3.org/ns/earl#>
            PREFIX kgi: <http://ns.inria.fr/kg/index#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            INSERT DATA {
                $datasetDescription a void:Dataset , dcat:Dataset , prov:Entity , earl:TestSubject ;
                    dcat:service $endpointDescription ;
                    dcat:distribution [
                        a dcat:Distribution ;
                        dcat:accessUrl $rawEndpointUrl ;
                        dcat:mediaType "application/sparql-query"
                    ] .
                $endpointDescription sd:endpoint $rawEndpointUrl ;
                    dcat:servesDataset $datasetDescription ;
                    dcat:endpointUrl $rawEndpointUrl ;
                    a sd:Service, dcat:DataService , prov:Entity , earl:TestSubject ;
                    prov:wasGeneratedBy <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/reachability.ttl#activity> .
                <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/reachability.ttl#activity> prov:used <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/reachability.ttl> ;
                    prov:wasAssociatedWith <https://orcid.org/0000-0002-9814-439X>  .
                $metadataDescription a prov:Entity , earl:TestSubject ;
                    prov:wasDerivedFrom $rawEndpointUrl ;
                    kgi:curated $datasetDescription , $endpointDescription ;
                    dqv:hasQualityMeasurement [
                        a dqv:QualityMeasurement ;
                        dqv:computedOn $endpointDescription ;
                        dqv:isMeasurementOf <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/reachability.ttl> ;
                        dqv:value "true"^^xsd:boolean
                    ] .

            }
            """
        ]
        <../meta/modifiedUpdate.ttl>
        <../meta/equivalences.ttl>
    ) ;
    kgi:onFailure (
        [ mf:action """PREFIX void: <http://rdfs.org/ns/void#>
            PREFIX dcat: <http://www.w3.org/ns/dcat#>
            PREFIX prov: <http://www.w3.org/ns/prov#>
            PREFIX sd: <http://www.w3.org/ns/sparql-service-description#>
            PREFIX earl: <http://www.w3.org/ns/earl#>
            PREFIX kgi: <http://ns.inria.fr/kg/index#>
            PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
            PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            INSERT DATA {
                $datasetDescription a void:Dataset , dcat:Dataset , prov:Entity , earl:TestSubject ;
                    dcat:service $endpointDescription ;
                    dcat:distribution [
                        a dcat:Distribution ;
                        dcat:accessUrl $rawEndpointUrl ;
                        dcat:mediaType "application/sparql-query"
                    ] .
                $endpointDescription sd:endpoint $rawEndpointUrl ;
                    dcat:servesDataset $datasetDescription ;
                    dcat:endpointUrl $rawEndpointUrl ;
                    prov:wasGeneratedBy <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/reachability.ttl#activity> ;
                    a sd:Service, dcat:DataService , prov:Entity , earl:TestSubject .
                <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/reachability.ttl#activity> prov:used <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/reachability.ttl> ;
                    prov:wasAssociatedWith <https://orcid.org/0000-0002-9814-439X> .
                $metadataDescription a prov:Entity , earl:TestSubject ;
                    prov:wasDerivedFrom $rawEndpointUrl ;
                    kgi:curated $datasetDescription , $endpointDescription ;
                    dqv:hasQualityMeasurement [
                        a dqv:QualityMeasurement ;
                        rdfs:label "Could not reach the endpoint"@en ;
                        dqv:computedOn $endpointDescription ;
                        dqv:isMeasurementOf <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/reachability.ttl> ;
                        dqv:value "false"^^xsd:boolean
                    ] .

            }
            """
        ]
        <../meta/modifiedUpdate.ttl>
    ) .

<provenance.ttl> a mf:ManifestEntry ;
    kgi:onSuccess (
        [ mf:action """PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
            PREFIX kgi: <http://ns.inria.fr/kg/index#>
            PREFIX prov: <http://www.w3.org/ns/prov#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            INSERT DATA {
                $metadataDescription prov:wasGeneratedBy <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/provenance.ttl#activity> ;
                    dqv:hasQualityMeasurement [
                            a dqv:QualityMeasurement ;
                            rdfs:label "Provenance information are present in the metadata"@en ;
                            dqv:computedOn $endpointDescription ;
                            dqv:isMeasurementOf <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/provenance.ttl> ;
                            dqv:value "true"^^xsd:boolean
                        ] .
                <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/provenance.ttl#activity> prov:used <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/provenance.ttl> ;
                    prov:wasAssociatedWith <https://orcid.org/0000-0002-9814-439X> .
            }
            """
        ]
        <../meta/modifiedUpdate.ttl>
    ) ;
    kgi:onFailure (
        [ mf:action """PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
            PREFIX kgi: <http://ns.inria.fr/kg/index#>
            PREFIX prov: <http://www.w3.org/ns/prov#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            INSERT DATA {
                $metadataDescription prov:wasGeneratedBy <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/provenance.ttl#activity> ;
                    dqv:hasQualityMeasurement [
                            a dqv:QualityMeasurement ;
                            rdfs:label "Provenance information are absent from the metadata"@en ;
                            dqv:computedOn $endpointDescription ;
                            dqv:isMeasurementOf <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/provenance.ttl> ;
                            dqv:value "false"^^xsd:boolean
                        ] .
                <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/provenance.ttl#activity> prov:used <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/provenance.ttl> ;
                    prov:wasAssociatedWith <https://orcid.org/0000-0002-9814-439X> .
            }
            """
        ]
        <../meta/modifiedUpdate.ttl>
    ) .

<shortUris.ttl> a mf:ManifestEntry ;
    kgi:onSuccess (
        [
            mf:action """PREFIX dqv: <http://www.w3.org/ns/dqv#>
                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
                PREFIX kgi: <http://ns.inria.fr/kg/index#>
                PREFIX prov: <http://www.w3.org/ns/prov#>
                PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
                PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
                CONSTRUCT {
                    $metadataDescription prov:wasGeneratedBy <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/shortUris.ttl#activity> ;
                        dqv:hasQualityMeasurement [
                                a dqv:QualityMeasurement ;
                                rdfs:label "Majority of URIs are not parametrized and below 80 characters"@en ;
                                dqv:computedOn $endpointDescription ;
                                dqv:isMeasurementOf <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/shortUris.ttl> ;
                                dqv:value ?measure
                            ] .
                    <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/shortUris.ttl#activity> prov:used <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/shortUris.ttl> ;
                        prov:wasAssociatedWith <https://orcid.org/0000-0002-9814-439X> .
                } WHERE {
                    {
                        SELECT (COUNT(?uris) AS ?countShort) {
                            { ?uris ?p ?o } UNION { ?s ?p ?uris }
                            FILTER(isIRI(?uris))
                            FILTER( ?p != rdf:type )
                            FILTER(! CONTAINS(str(?uris), "?") )
                            BIND(strlen(str(?uris)) AS ?uriLen)
                            FILTER(?uriLen < 80)
                        }
                    }
                    {
                        SELECT (COUNT(?uris) AS ?countNormal) {
                            { ?uris ?p ?o } UNION { ?s ?p ?uris }
                            FILTER( ?p != rdf:type )
                            FILTER(isIRI(?uris))
                        }
                    }
                    BIND( (?countShort/?countNormal) AS ?measure)
                }
                """
        ]
        <../meta/modifiedUpdate.ttl>
    ) ;

<RDFDataStructures.ttl> a mf:ManifestEntry ;
    kgi:onSuccess (
        [
            mf:action """PREFIX dqv: <http://www.w3.org/ns/dqv#>
                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
                PREFIX kgi: <http://ns.inria.fr/kg/index#>
                PREFIX prov: <http://www.w3.org/ns/prov#>
                PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
                PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
                CONSTRUCT {
                    $metadataDescription prov:wasGeneratedBy <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/RDFDataStructures.ttl#activity> ;
                        dqv:hasQualityMeasurement [
                                a dqv:QualityMeasurement ;
                                rdfs:label "RDF data structures are not widely used in the dataset."@en ;
                                dqv:computedOn $endpointDescription ;
                                dqv:isMeasurementOf <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/RDFDataStructures.ttl> ;
                                dqv:value ?measure
                            ] .
                    <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/shortUris.ttl#activity> prov:used <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/RDFDataStructures.ttl> ;
                        prov:wasAssociatedWith <https://orcid.org/0000-0002-9814-439X> .
                } WHERE {
                    {
                        SELECT (COUNT(DISTINCT *) AS ?countStruct) {
                            {
                                ?s ?p ?o .
                                VALUES ?p { rdf:type rdf:subject rdf:predicate rdf:object rdfs:member rdf:first rdf:rest }
                                VALUES ?o { rdf:Statement rdf:Alt rdf:Bag rdf:Seq rdf:Container rdf:List }
                            } UNION {
                                ?s ?p ?o .
                                FILTER(CONTAINS(str(?p), "http://www.w3.org/1999/02/22-rdf-syntax-ns#_"))
                            }
                        }
                    }
                    {
                        SELECT (COUNT(DISTINCT *) AS ?count) {
                            ?s ?p ?o
                        }
                    }
                    BIND( (1 - ?countStruct/?count) AS ?measure)
                }
                """
        ]
        <../meta/modifiedUpdate.ttl>
    ) ;

<knownVocabularies.ttl> a mf:ManifestEntry ;
    kgi:onSuccess (
        [
            kgi:timeout "PT120S"^^xsd:duration ;
            kgi:endpoint kgi:federation ;
            mf:action """PREFIX dqv: <http://www.w3.org/ns/dqv#>
            PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
            PREFIX kgi: <http://ns.inria.fr/kg/index#>
            PREFIX prov: <http://www.w3.org/ns/prov#>
            PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            CONSTRUCT {
                $metadataDescription prov:wasGeneratedBy <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/knownVocabularies.ttl#activity> ;
                    dqv:hasQualityMeasurement [
                            a dqv:QualityMeasurement ;
                            rdfs:label "Known vocabularies are used in the dataset."@en ;
                            dqv:computedOn $endpointDescription ;
                            dqv:isMeasurementOf <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/knownVocabularies.ttl> ;
                            dqv:value ?measure
                        ] .
                <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/shortUris.ttl#activity> prov:used <https://raw.githubusercontent.com/Wimmics/dekalog/master/rules/check/knownVocabularies.ttl> ;
                    prov:wasAssociatedWith <https://orcid.org/0000-0002-9814-439X> .
            } WHERE {
                SERVICE $rawEndpointUrl {
                    {
                        SELECT (COUNT(DISTINCT ?p) AS ?countProp) {
                            ?s ?p ?o .
                        }
                    }
                    {
                        SELECT (COUNT(DISTINCT ?c) AS ?countClass) {
                            ?s ?p ?c .
                        }
                    }
                }
                SERVICE <https://lov.linkeddata.es/dataset/lov/sparql> {
                    GRAPH <https://lov.linkeddata.es/dataset/lov> {
                        ?vocabURI a voaf:Vocabulary.
                        ?vocabURI vann:preferredNamespaceUri ?vocabPrefix.
                    }
                }
                BIND( (1 - ?countStruct/(?countProp + ?countClass)) AS ?measure)
            }
            """
        ]
        <../meta/modifiedUpdate.ttl>
    ) ;
